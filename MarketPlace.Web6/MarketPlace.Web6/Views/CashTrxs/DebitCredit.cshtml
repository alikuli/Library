@model ModelsClassLibrary.ModelsNS.DocumentsNS.CashNS.CashTrxNS.CashTrxDbCrModel

@{
    ViewBag.Title = "Debit Credit";
    decimal runningBalance = Model.BroughtForward;
    
    string textColorForAvailable = " text-black ";
    string textColorForUnavailable= " text-danger ";
    string backgrounColorForRefundable = " "; ;
    string backgroundColorForNonRefundable = "bg-warning ";
    int count = 1;
    
}

@if (Model.IsNoMoreData)
{
    <h2>
        @Model.Heading
    </h2>
    <h3>
        @Model.SubHeading
    </h3>
    <h2 class="alert-danger">No data!</h2>

}
else
{
    string todayMinusOne = Model.FromDate == DateTime.MinValue ? DateTime.MinValue.ToString("yyyy-MMM-dd") : Model.FromDate.AddDays(-1).ToString("yyyy-MMM-dd");
    string bf_Orders_Path = Url.Action("getCashStatement", "CashTrxs", new { cashTypeEnum = Model.CashTypeEnum, toDateStr = todayMinusOne, isShowAdminReports = Model.IsShowAdminReports, cashStateEnum = CashStateENUM.All });
    string bf_Orders_ToolTip = string.Format("You can see detail before {0:dd-MMM-yyyy} by clicking here.", Model.FromDate);

    <table class=" table table-responsive table-striped table-light table-hover table-bordered  small">
        <thead>
            <tr class="bg-primary text-white font-weight-bold p-1">
                <th scope="row" colspan="8" class="text-center">
                    <h4>
                        @Model.Heading
                    </h4>
                    <h5>
                        @Model.SubHeading
                    </h5>

                </th>
            </tr>
        </thead>
        <tr class="bg-dark font-weight-bold text-white">
            <th class="">
                Sr#
            </th>
            <th>
                Date
            </th>
            <th>
                Number
            </th>
            <th>
                From/To
            </th>
            <th class="text-right">
                @string.Format("{0:N2}", Html.DisplayNameFor(model => model.CashTrxs_DateDelimited[0].ReceiptAmount_ForTotal))
            </th>
            <th class="text-right">
                @string.Format("{0:N2}", Html.DisplayNameFor(model => model.CashTrxs_DateDelimited[0].PaymentAmount_ForTotal))

            </th>
            <th class="text-right">
                Running Balance
            </th>
            <th>
                Comment
            </th>
        </tr>

        @*Running balance*@


        <tr>
            <td class="">
                @count.
            </td>
            <td>
                Up to @Model.FromDate
            </td>
            <td>
                Various
            </td>
            <td>

                Brought forward

            </td>
            <td class="text-right">
                <a href="@bf_Orders_Path" data-toggle="tooltip" title="@bf_Orders_ToolTip" data-placement="left">@string.Format("{0:N2}", @Model.RecievedBF)</a>
            </td>
            <td class="text-right">
                <a href="@bf_Orders_Path" data-toggle="tooltip" title="@bf_Orders_ToolTip" data-placement="left">@string.Format("{0:N2}", @Model.PaidBF)</a>
            </td>
            <td class="text-right">
                @string.Format("{0:N2}", runningBalance)
            </td>
            <td>
                Running Balance.


            </td>
        </tr>
        @foreach (ModelsClassLibrary.CashTrxNS.CashTrxVM2 item in Model.CashTrxs_DateDelimited.ToList())
        {
            bool showAnchor = true;
            count++;
            string classForLineItem = "";
            runningBalance = runningBalance + item.ReceiptAmount_ForTotal - item.PaymentAmount_ForTotal;
            string link = "";

            //string cash_receiving_note = "";
            switch (item.CashTypeEnum)
            {
                case CashTypeENUM.NonRefundable:

                    classForLineItem += backgroundColorForNonRefundable;
                    break;
                case CashTypeENUM.Refundable:
                    classForLineItem += backgrounColorForRefundable;
                    break;
                default:
                    break;

            }



            switch (item.CashStateEnum)
            {
                case CashStateENUM.Available:
                    classForLineItem += textColorForAvailable;
                    break;
                case CashStateENUM.Allocated:
                    classForLineItem += textColorForUnavailable;
                    //cash_receiving_note = "Not available";

                    break;
                case CashStateENUM.All:
                    break;
                default:
                    break;
            }


            <tr class=" @classForLineItem ">

                <td>@count.</td>
                <td>
                    @Html.DisplayFor(modelItem => item.Date)
                </td>


                <td>


                    @switch (item.CashTrxVmDocumentTypeEnum)
                    {
                        case CashTrxVmDocumentTypeENUM.Unknown:
                            break;
                        case CashTrxVmDocumentTypeENUM.SaleOrder:
                            link = Url.Action("Edit", "BuySellDocs", new { id = item.Id, returnUrl = Request.Url.PathAndQuery, buySellDocumentTypeEnum = BuySellDocumentTypeENUM.Sale });
                            break;
                        case CashTrxVmDocumentTypeENUM.SaleOrderCharges:
                            break;
                        case CashTrxVmDocumentTypeENUM.PurchaseOrder:
                            link = Url.Action("Edit", "BuySellDocs", new { id = item.Id, returnUrl = Request.Url.PathAndQuery, buySellDocumentTypeEnum = BuySellDocumentTypeENUM.Purchase });
                            break;
                        case CashTrxVmDocumentTypeENUM.DeliveryOrder:
                            link = Url.Action("Edit", "BuySellDocs", new { id = item.Id, returnUrl = Request.Url.PathAndQuery, buySellDocumentTypeEnum = BuySellDocumentTypeENUM.Delivery });
                            break;
                        case CashTrxVmDocumentTypeENUM.EncashmentRequest:
                            link = Url.Action("Edit", "CashEncashmentTrx", new { id = item.Id, returnUrl = Request.Url.PathAndQuery });
                            break;
                        default:
                            showAnchor = false;
                            break;
                    }
                    @if (showAnchor)
                    {
                        <a href="@link">@item.DocNoFixed()</a>

                    }
                    else
                    {
                        @item.DocNoFixed()
                    }
                        
                </td>


                <td>
                    <strong>Fm: </strong>
                    @item.FromPerson.FullName()
                    <strong>->To: </strong>
                    @item.ToPerson.FullName()


                </td>


                <td class="text-right">
                    @if (item.ReceiptAmount != 0)
                    {
                        <span>
                            @string.Format("{0:N2}", item.ReceiptAmount)
                        </span>

                    }
                </td>


                <td class="text-right">
                    @if (item.PaymentAmount != 0)
                    {
                        <span>
                            @string.Format("{0:N2}", item.PaymentAmount)
                        </span>
                    }
                </td>


                <td class="text-right">
                    @string.Format("{0:N2}", runningBalance)
                </td>


                <td>
                    @Html.DisplayFor(modelItem => item.FixedComment)
                    @*@if (cash_receiving_note.IsNullOrWhiteSpace())
                        { }
                        else
                        {
                        <small>(@cash_receiving_note)</small>

                        }*@



                </td>

            </tr>
        }
        <tfoot>
            <tr class="bg-dark text-white font-weight-bold p-1">
                <th class="text-right" scope="row" colspan="4"> Final Balance : </th>
                <th class="text-right"><strong>@string.Format("{0:N2}", @Model.TotalRecieved)</strong></th>
                <th class="text-right"><strong>@string.Format("{0:N2}", @Model.TotalPaid)</strong></th>
                <th class="text-right">@string.Format("{0:N2}", runningBalance)</th>
                <th class=""></th>

            </tr>
            <tr>
                <th class="alert alert-danger text-center" colspan="8">
                    Some message
                </th>
            </tr>
        </tfoot>
    </table>
}
