@model ModelsClassLibrary.ModelsNS.DocumentsNS.BuySellItemNS.BuySellItem

@{
    ModelsClassLibrary.ModelsNS.DocumentsNS.BuySellDocNS.BuySellDocViewStateNS.IBuySellDocViewState viewState = Model.BuySellDocViewState;

    var dicDisabled = new Dictionary<string, object>();
    dicDisabled.Add("@class", "form-control col-2");
    dicDisabled.Add("data_toggle", "tooltip");
    dicDisabled.Add("data_placement", "top");
    dicDisabled.Add("disabled", "disabled");


    var dicSalePrice = new Dictionary<string, object>();
    dicSalePrice.Add("@class", "form-control col-2");
    dicSalePrice.Add("data_toggle", "tooltip");
    dicSalePrice.Add("data_placement", "top");
    dicSalePrice.Add("onchange", "getTotalShipping()");

    var dicOrderedAmount = new Dictionary<string, object>();
    dicOrderedAmount.Add("@class", "form-control col-2");
    dicOrderedAmount.Add("data_toggle", "tooltip");
    dicOrderedAmount.Add("data_placement", "top");

    //var dicShippedAmount = new Dictionary<string, object>();
    //dicShippedAmount.Add("@class", "form-control col-2");
    //dicShippedAmount.Add("data_toggle", "tooltip");
    //dicShippedAmount.Add("data_placement", "top");
    //dicShippedAmount.Add("onchange", "getTotalShipping()");


    //var dicShippedAmountRs = new Dictionary<string, object>();
    //dicShippedAmountRs.Add("@class", "form-control col-2");
    //dicShippedAmountRs.Add("data_toggle", "tooltip");
    //dicShippedAmountRs.Add("data_placement", "top");
    //dicShippedAmountRs.Add("disabled", "disabled");
    //dicShippedAmountRs.Add("onchange", "getTotalShipping()");

    var dicOrderedRs_Formatted = new Dictionary<string, object>();
    dicOrderedRs_Formatted.Add("@class", "form-control col-2");
    dicOrderedRs_Formatted.Add("data_toggle", "tooltip");
    dicOrderedRs_Formatted.Add("data_placement", "top");
    dicOrderedRs_Formatted.Add("disabled", "disabled");


    var dicOriginalQty = new Dictionary<string, object>();
    dicOriginalQty.Add("@class", "form-control col-2");
    dicOriginalQty.Add("data_toggle", "tooltip");
    dicOriginalQty.Add("data_placement", "top");
    dicOriginalQty.Add("disabled", "disabled");

    bool orderedAmount_Enabled = viewState.OD_OrderedIsEnabled;
    
    //bool shippedAmountEnabled = viewState.OD_ShippedIsEnabled;
    //bool shippedAmountVisible = viewState.OD_ShippedIsVisible;
    bool salePriceIsEnabled = viewState.OD_SalePriceIsEnabled;
    bool showOriginalPrice = Model.SalePrice != Model.OriginalPrice;
    bool hideOriginalQuantity = Model.Quantity.IsOrderSameAsOriginal;
    //if(showOriginalPrice)
    //{
        
    //}
    //else
    //{
    //    Html.HiddenFor(x => x.OriginalPrice);
    //    Html.HiddenFor(x => x.Difference_Formatted);        
    //}
    
    
    if (Model.IsDeleting)
    {
        dicSalePrice.Add("disabled", "disabled");
        
    }

    
    
    if (orderedAmount_Enabled)
    {
        dicOrderedAmount.Add("onchange", "getTotalShipping()");

    }
    else
    {
        dicOrderedAmount.Add("disabled", "disabled");
        Html.HiddenFor(x => x.Quantity.Order);

    }
    
    
    
    
    //if (shippedAmountEnabled)
    //{

    //}
    //else
    //{
    //    //dicShippedAmount.Add("disabled", "disabled");

    //}

    
    
    //if (shippedAmountEnabled && shippedAmountVisible)
    //{
        
    //}
    //else
    //{
    //    // If not enabled or invisible, then create a hidden field
    //    Html.HiddenFor(x => x.Quantity.Ship);
    //}




    if (salePriceIsEnabled)
    {

    }
    else
    {
        dicSalePrice.Add("disabled", "disabled");
        Html.HiddenFor(x => x.SalePrice);

    }
    
    
}
<div class="well p-3 m-3">


    @Html.HiddenFor(x => x.BuySellDocId)
    @Html.HiddenFor(x =>x.Name)
    @Html.HiddenFor(x => x.IsUserOwned)
    @Html.HiddenFor(x => x.BuySellDocumentTypeEnum)
    @Html.HiddenFor(x => x.BuySellDocStateEnum)






    <div class="form-group">
            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "col-2" })
            @Html.EditorFor(model => model.Name, new { htmlAttributes = AliKuli.Extentions.HtmlHelpers.GetHtmlAttributes(new { title = "Name" }, dicDisabled) })
    </div>





    <div class="form-group">
        @Html.LabelFor(model => model.Quantity.Order, htmlAttributes: new { @class = "col-2" })
        @Html.EditorFor(model => model.Quantity.OrderStr, new { htmlAttributes = AliKuli.Extentions.HtmlHelpers.GetHtmlAttributes(new { title = "Quantity Ordered" }, dicOrderedAmount) })
    </div>




    @if(hideOriginalQuantity)
    { }
    else
    { 
        <div class="form-group">
            @Html.LabelFor(model => model.Quantity.Order_Original, htmlAttributes: new { @class = "col-2" })
            @Html.EditorFor(model => model.Quantity.Order_Original, new { htmlAttributes = AliKuli.Extentions.HtmlHelpers.GetHtmlAttributes(new { title = "Original Quantity Ordered. This will change if you update the quantity" }, dicOriginalQty) })
        </div>
    }





    @*@if(shippedAmountVisible)
    { 
        <div class="form-group">
            @Html.LabelFor(model => model.Quantity.Ship, htmlAttributes: new { @class = "col-2" })
            @Html.EditorFor(model => model.Quantity.Ship, new { htmlAttributes = AliKuli.Extentions.HtmlHelpers.GetHtmlAttributes(new { title = "Quantity Ordered" }, dicShippedAmount) })
        </div>
        if (shippedAmountEnabled)
        {

        }
        else
        {
            <span></span>
            // If not enabled or invisible, then create a hidden field
 //           @Html.HiddenFor(x => x.Quantity.Ship);
        }
    }
    else
    {
        Html.HiddenFor(x => x.Quantity.Ship);
    }*@




    @if (salePriceIsEnabled)
    {
        <div class="form-group">
            @Html.LabelFor(model => model.SalePrice, htmlAttributes: new { @class = "col-2" })
            @Html.EditorFor(model => model.SalePriceStr, new { htmlAttributes = AliKuli.Extentions.HtmlHelpers.GetHtmlAttributes(new { title = "Sale price" }, dicSalePrice) })
        </div>

    }
    else
    {
        <div class="form-group">
            @Html.LabelFor(model => model.SalePrice, htmlAttributes: new { @class = "col-2" })
            @Html.EditorFor(model => model.SalePrice_Formatted, new { htmlAttributes = AliKuli.Extentions.HtmlHelpers.GetHtmlAttributes(new { title = "Sale price" }, dicSalePrice) })
        </div>

    }






    <div class="form-group">
        <label class="col-2" for="ShippedRs_Formatted">Total</label> 
        @Html.EditorFor(model => model.OrderedRs_Formatted, new { htmlAttributes = AliKuli.Extentions.HtmlHelpers.GetHtmlAttributes(new { title = "This is the total sale amount" }, dicOrderedRs_Formatted) })
    </div>

    @if(@showOriginalPrice)
    { 
        <div class="alert alert-info ">
            <div class="form-group">
                @Html.LabelFor(model => model.OriginalPrice, htmlAttributes: new { @class = "col-2" })
                @Html.EditorFor(model => model.OriginalPrice_Formatted, new { htmlAttributes = AliKuli.Extentions.HtmlHelpers.GetHtmlAttributes(new { title = "This what the seller wants to sell at" }, dicDisabled) })
                @Html.HiddenFor(x => x.OriginalPrice)
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Difference_Formatted, htmlAttributes: new { @class = "col-2" })
                @Html.EditorFor(model => model.Difference_Formatted, new { htmlAttributes = AliKuli.Extentions.HtmlHelpers.GetHtmlAttributes(new { title = "Difference in the Sale price" }, dicDisabled) })
            </div>
        </div>
    }
    else
    {
        @Html.HiddenFor(x => x.OriginalPrice);
        @Html.HiddenFor(x => x.Difference_Formatted);

    }
    
    @*@if (showLastOffer_Seller)
    {
        if (Model.LastOffer_Seller.Amount != 0)
        { 
            <div class="form-group alert-success p-3 ">
                @Html.LabelFor(model => model.LastOffer_Seller, htmlAttributes: new { @class = "" })
                @Html.EditorFor(model => model.LastOffer_Seller, new { htmlAttributes = AliKuli.Extentions.HtmlHelpers.GetHtmlAttributes(new { title = "Sale price" }, dicDisabled) })
            </div>
        }
    }
    

    @if (showLastOffer_Buyer)
    {
        if (Model.LastOffer_Buyer.Amount != 0)
        { 
            <div class="form-group alert-info p-3 ">
                @Html.LabelFor(model => model.LastOffer_Buyer, htmlAttributes: new { @class = "" })
                @Html.EditorFor(model => model.LastOffer_Buyer, new { htmlAttributes = AliKuli.Extentions.HtmlHelpers.GetHtmlAttributes(new { title = "Sale price" }, dicDisabled) })
            </div>
        }
    }*@

</div>