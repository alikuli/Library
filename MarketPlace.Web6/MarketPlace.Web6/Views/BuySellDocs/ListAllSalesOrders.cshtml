@model ModelsClassLibrary.ModelsNS.DocumentsNS.BuySellDocNS.BuySellStatementModel

@{
    ViewBag.Title = "Sales Order List";
    string colorForSaleOrder = " alert-success rounded-pill p-1 m-1";
    string colorForCreditOrder = "alert-info rounded-pill p-1 m-";
    string colorForInProccessOrder = "alert-warning rounded-pill p-1 m-3";
    string colorForBackOrder = "alert-danger rounded-pill p-1 m-3";
    string colorForQuotation = "alert-dark rounded-pill p-1 m-3";
    string colorForClosed = "alert-dark rounded-pill p-1 m-3";
    string colorForCanceledOrder = "alert-dark rounded-pill p-1 m-1";
}

<h2>
    <span class="text-success ">@Model.MainHeading</span>

</h2>
<h3>
    <span class="text-success ">@Model.SubHeading</span>
</h3>


@if (!Model.Docs.IsNullOrEmpty())
{
    string fromDateString = new DateTime(Model.FromDate.Year, Model.FromDate.Month, Model.FromDate.Day).ToShortDateString();

    string path_live_Orders_BF_ToolTip = "Click here to see older live orders.";
    string path_live_Orders_BF = Url.Action("List_Live_SalesOrders", "BuySellDocs", new { toDateString = fromDateString, isAdmin = Model.IsAdmin});



    <table class=" table table-responsive table-striped table-light table-hover table-bordered" >
        <caption>
            <span class="@colorForSaleOrder">Open </span>
            <span class="@colorForInProccessOrder">In Proccess</span>
            <span class="@colorForBackOrder">Back Ordered </span>
            <span class="@colorForCreditOrder">Credit</span>
            <span class="@colorForCanceledOrder">Canceled</span>
            <span class="@colorForClosed">Closed</span>
            <span class="@colorForQuotation">Quotation</span>
        </caption>
        <thead>
            <tr class="alert-info p-1 ">
                <th scope="row"></th>
                <th></th>
                <th></th>
                <th></th>
                <th></th>
                <th></th>
                <th class=""></th>
            </tr>
        </thead>
        <tr >
            <th>
                Date
            </th>
            <th>
                Number
            </th>
            <th>
                From/To
            </th>
            <th>
                Live
            </th>
            <th>
                Dead
            </th>
            <th>
                Comment
            </th>
            <th>

            </th>
        </tr>

         @*Running balance*@
        <tr>
            <td>
                Up to 
            </td>
            <td>
                Various
            </td>
            <td>
                
                Brought forward

            </td>
            <td>
                <span>
                    <a href="@path_live_Orders_BF" data-toggle="tooltip" title="@path_live_Orders_BF_ToolTip" data-placement="left">@string.Format("{0:N2}", Model.Live_BF)</a>
                    
                </span>
            </td>
            <td>
                <span>
                    <a href="@path_live_Orders_BF" data-toggle="tooltip" title="@path_live_Orders_BF_ToolTip" data-placement="left">@string.Format("{0:N2}", Model.Dead_BF)</a>
                    
                </span>
            </td>
            <td>
                Old Orders
            </td>
            <td>


            </td>
        </tr>
        @foreach (ModelsClassLibrary.ModelsNS.DocumentsNS.BuySellDocNS.BuySellDoc item in Model.Docs.ToList())
        {
            string edit_order_path = Url.Action("Edit", "BuySellDocs", new { id = item.Id, returnUrl = Request.Url.PathAndQuery, buySellStatementType = AliKuli.ConstantsNS.MyConstants.SALE_ORDER_STATEMENT });

            string delete_order_path = Url.Action("Delete", "BuySellDocs", new { id = item.Id, returnUrl = Request.Url.PathAndQuery, buySellStatementType = AliKuli.ConstantsNS.MyConstants.SALE_ORDER_STATEMENT }); 
            
            string deleteToolTip = "Select this to delete the order.";
            string editToolTip = "Select this to edit the order. You can also click on the order from/to link";
            string classForLineItem = "";
            switch (item.BuySellDocStateEnum)
            {
                case BuySellDocStateENUM.New:
                    classForLineItem = colorForSaleOrder;
                    break;
                case BuySellDocStateENUM.InProccess:
                    classForLineItem = colorForCreditOrder;
                    break;
                case BuySellDocStateENUM.BackOrdered:
                    classForLineItem = colorForInProccessOrder;
                    break;

                case BuySellDocStateENUM.Canceled:
                    classForLineItem = colorForBackOrder;
                    break;
                case BuySellDocStateENUM.Quotation:
                    classForLineItem = colorForBackOrder;
                    break;
                case BuySellDocStateENUM.Closed:
                    classForLineItem = colorForQuotation;
                    break;
                case BuySellDocStateENUM.Credit:
                    classForLineItem = colorForBackOrder;
                    break;
                default:
                    break;

            }

            <tr class="@classForLineItem ">
                
                <td>
                    @Html.DisplayFor(modelItem => item.MetaData.Created.Date_NotNull_Min)
                </td>
                
                
                <td>
                    @Html.DisplayFor(modelItem => item.Name)
                </td>
                
                
                <td>
                    <a href="@edit_order_path">@item.FullName()</a>
                    




                </td>
                
                
                <td>
                    @if (@Model.IsShippable(item))
                    { 
                        if (item.TotalRemaining != 0)
                        {
                            <span>
                                @string.Format("{0:N2}", item.TotalRemaining)
                            </span>
                        }
                    }
                </td>


                <td>
                    @if (!@Model.IsShippable(item))
                    {
                        if (item.TotalRemaining != 0)
                        {
                            <span>
                                @string.Format("{0:N2}", item.TotalRemaining)
                            </span>
                        }
                    }
                </td>
                
                
            
                    
                <td>
                    @item.BuySellDocStateEnum.ToString()


                </td>
                <td>
                    <button data-toggle="tooltip"
                            title="@deleteToolTip"
                            data-placement="top"
                            class="btn btn-sm btn-danger"
                            onclick="openPath('@delete_order_path')">

                        <img width="20" src="~/ContentMine/Icons/GarbageCan.png" />
                    </button>
                    <button data-toggle="tooltip"
                            title="@editToolTip"
                            data-placement="top"
                            class="btn btn-sm btn-success"
                            onclick="openPath('@edit_order_path')">

                        <img width="20" src="~/ContentMine/Icons/Edit.png" />
                    </button>

                </td>
            
            </tr>
        }
        <tfoot>
            <tr class="alert-info p-1">
                <th scope="row"></th>
                <th></th>
                <th></th>
                <th><strong>@string.Format("{0:N2}", Model.GrandTotal_Live)</strong></th>
                <th><strong>@string.Format("{0:N2}", Model.GrandTotal_Dead)</strong></th>
                <th class=""></th>
                <th class=""></th>

            </tr>
        </tfoot>
    </table>
}
else
{
    <h2 class="alert-danger">No data!</h2>
}