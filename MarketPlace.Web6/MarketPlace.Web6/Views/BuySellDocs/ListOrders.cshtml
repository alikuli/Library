@model ModelsClassLibrary.ModelsNS.DocumentsNS.BuySellDocNS.BuySellStatementModel

@{
    ViewBag.Title = "Purchases Order List";
    string colorFor_RequestUnconfirmed = "badge badge-pill badge-requestunconfirmed";
    string colorFor_RequestConfirmed = "badge  badge-pill badge-requestconfirmed";
    string colorFor_ConfirmedBySeller = "badge badge-pill badge-confirmedbyseller";
    string colorFor_ReadyForShipment = "badge badge-pill badge-readyforshipment";
    string colorFor_ConfirmedByCourier = "badge badge-pill badge-confirmedbycourier";
    string colorFor_PickedUp = "badge badge-pill badge-pickedup";
    string colorFor_Delivered = "badge badge-pill badge-delivered";
    string colorFor_Rejected = "badge badge-pill badge-rejected";
    string colorFor_Problem = "badge badge-pill badge-problem";
}

<h2>
    <span class="text-success ">@Model.MainHeading</span>

</h2>
<h3>
    <span class="text-success ">@Model.SubHeading</span>

</h3>

@if (!Model.Docs.IsNullOrEmpty())
{
    string path_live_Orders_BF_ToolTip = "Click here to see older live orders.";
    string fromDateString = new DateTime(Model.FromDate.Year,Model.FromDate.Month,Model.FromDate.Day).ToShortDateString();
    //string path_live_Orders_BF = Url.Action("List_Live_PurchasesOrders", "BuySellDocs") + "?toDateString=" + fromDateString;

    string tooltip_Request_Unconfirmed = "When an order has Request Unconfirmed status it means that the a potential buyer is thinking of purchasing this item. The sale has not been confirmed yet";
    string tooltip_Request_Confirmed = "When an order has Request Confirmed status it means that the sale has been confirmed by the buyer. This can be executed. If the price is red, it means that the price has been changed.";
    string tooltip_ConfirmedBySeller = "The item has been confirmed by the seller. He is promising to ship the product.";
    string tooltip_ReadyForShipment = "The item is ready for shipment. If a courier has not been designated, a courier company is being found.";
    string tooltip_ConfirmedByCourier = "A courier has confirmed they will pick the product.";
    string tooltip_PickedUp = "The product has been picked up by the courier.";
    string tooltip_Delivered = "The product has been delivered to the customer.";
    string tooltip_Rejected = "The product has been rejected for some reason.";
    string tooltip_Problem = "There is a problem";

    string path_live_Orders_BF = "";

    switch (Model.BuySellDocumentTypeEnum)
    {
        case BuySellDocumentTypeENUM.Sale:
            path_live_Orders_BF = Url.Action("List_Live_PurchasesOrders", "BuySellDocs", new { toDateString = fromDateString, isAdmin = Model.IsAdmin, BuySellDocumentTypeEnum = BuySellDocumentTypeENUM.Sale});
            break;
            
        case BuySellDocumentTypeENUM.Purchase:
            path_live_Orders_BF = Url.Action("List_Live_PurchasesOrders", "BuySellDocs", new { toDateString = fromDateString, isAdmin = Model.IsAdmin, BuySellDocumentTypeEnum = BuySellDocumentTypeENUM.Purchase });
            break;
            
        case BuySellDocumentTypeENUM.Unknown:
            break;
        default:
            break;
    }
    
    <table class=" table table-responsive table-striped table-light table-hover table-bordered" >
        <caption class="badge-">
            <span class="@colorFor_RequestUnconfirmed" data-toggle="tooltip" title="@tooltip_Request_Unconfirmed" data-placement="top">Request Unconfirmed</span>
            <span class="@colorFor_RequestConfirmed" data-toggle="tooltip" title="@tooltip_Request_Confirmed" data-placement="top">Request Confirmed</span>
            <span class="@colorFor_ConfirmedBySeller" data-toggle="tooltip" title="@tooltip_ConfirmedBySeller" data-placement="top">Confirmed By Seller</span>
            <span class="@colorFor_ReadyForShipment" data-toggle="tooltip" title="@tooltip_ReadyForShipment" data-placement="top">Ready For Shipment</span>
            <span class="@colorFor_ConfirmedByCourier" data-toggle="tooltip" title="@tooltip_ConfirmedByCourier" data-placement="top">Confirmed By Courier</span>
            <span class="@colorFor_PickedUp" data-toggle="tooltip" title="@tooltip_PickedUp" data-placement="top">Picked Up</span>
            <span class="@colorFor_Delivered" data-toggle="tooltip" title="@tooltip_Delivered" data-placement="top">Delivered</span>
            <span class="@colorFor_Rejected" data-toggle="tooltip" title="@tooltip_Rejected" data-placement="top">Rejected</span>
            <span class="@colorFor_Problem" data-toggle="tooltip" title="@tooltip_Problem" data-placement="top">Problem</span>
        </caption>
        <thead>
            <tr class="alert-info p-1 ">
                <th scope="row"></th>
                <th></th>
                <th></th>
                <th></th>
                <th></th>
                <th></th>
                <th class=""></th>
            </tr>
        </thead>
        <tr >
            <th>
                Date
            </th>
            <th>
                Number
            </th>
            <th>
                From/To
            </th>
            <th>
                Live
            </th>
            <th>
                Completed
            </th>
            <th>
                Comment
            </th>
            <th>

            </th>
        </tr>

         @*Running balance*@
        <tr>
            <td>
                Up to 
            </td>
            <td>
                Various
            </td>
            <td>
                
                Brought forward

            </td>
            <td>
                <span>
                    <a href="@path_live_Orders_BF" data-toggle="tooltip" title="@path_live_Orders_BF_ToolTip" data-placement="left">@string.Format("{0:N2}", Model.Live_BF)</a>
                    
                </span>
            </td>
            <td>
                <span>
                    <a href="@path_live_Orders_BF" data-toggle="tooltip" title="@path_live_Orders_BF_ToolTip" data-placement="left">@string.Format("{0:N2}", Model.Dead_BF)</a>
                    
                </span>
            </td>
            <td>
                Old Orders
            </td>
            <td>


            </td>
        </tr>
        @foreach (ModelsClassLibrary.ModelsNS.DocumentsNS.BuySellDocNS.BuySellDoc item in Model.Docs.ToList())
        {
            string edit_order_path ="";
            string delete_order_path = Url.Action("Delete", "BuySellDocs", new { id = item.Id, returnUrl = Request.Url.PathAndQuery, buySellStatementType = AliKuli.ConstantsNS.MyConstants.PURCHASE_ORDER_STATEMENT });
            string classForLineItem = "";
            string disableEditButton = "";
            string disableDeleteButton = "";
            string highlightIfPriceDifferentClass = "";

            string toolTip_Delete = "Select this to delete the order.";
            string toolTip_Edit = "Select this to edit the order. You can also click on the order from/to link";
            string tooltip_Date = "This is the date of the order";
            string tooltip_Number = "This is the order number";
            string tooltip_Name = "This is item that is being sold or bought";
            string tooltip_LiveSale = "this is the total sale. If it is highlighted in red, then the price has been changed.";
            string tooltip_CompletedSale = "This sale has been completed, delivered.";
            string tooltip_Comment = "This is the status of the sale. A comment by the system. This is color coded. Look below at the legend.";

            
            
            
            
            switch (Model.BuySellDocumentTypeEnum)
            {
                case BuySellDocumentTypeENUM.Sale:
                    tooltip_Name = "This is item that is being sold ";
                    
                    break;
                    
                    
                case BuySellDocumentTypeENUM.Purchase:
                    tooltip_Name = "This is item that is being bought";
                    edit_order_path = Url.Action("Edit", "BuySellDocs", new { id = item.Id, returnUrl = Request.Url.PathAndQuery, buySellDocumentTypeEnum = BuySellDocumentTypeENUM.Purchase });
                    

                    break;
                case BuySellDocumentTypeENUM.Unknown:
                    break;
                default:
                    break;
            }

            
            
            
            switch (item.BuySellDocStateEnum)
            {
                case BuySellDocStateENUM.RequestUnconfirmed:
                    classForLineItem = "badge-requestunconfirmed";
                    highlightIfPriceDifferentClass = item.IsAllItemPricesOriginal ? "" : " badge-problem ";
                    break;
                case BuySellDocStateENUM.RequestConfirmed:
                    classForLineItem = "badge-requestconfirmed";
                    highlightIfPriceDifferentClass = item.IsAllItemPricesOriginal ? "" : " badge-problem ";
                    
                    break;
                case BuySellDocStateENUM.ConfirmedBySeller:
                    classForLineItem = "badge-confirmedbyseller";
                    disableEditButton = "disabled";
                    disableDeleteButton = "disabled";
                    break;

                case BuySellDocStateENUM.ReadyForShipment:
                    classForLineItem = "badge-readyforshipment";
                    disableEditButton = "disabled";
                    disableDeleteButton = "disabled";
                    break;
                case BuySellDocStateENUM.ConfirmedByCourier:
                    classForLineItem = "badge-confirmedbycourier";
                    disableEditButton = "disabled";
                    disableDeleteButton = "disabled";
                    break;
                case BuySellDocStateENUM.PickedUp:
                    classForLineItem = "badge-pickedup";
                    disableEditButton = "disabled";
                    disableDeleteButton = "disabled";
                    break;
                case BuySellDocStateENUM.Delivered:
                    classForLineItem = "badge-delivered";
                    disableEditButton = "disabled";
                    disableDeleteButton = "disabled";
                    break;
                case BuySellDocStateENUM.Rejected:
                    disableEditButton = "disabled";
                    disableDeleteButton = "disabled";
                    classForLineItem = "badge-rejected";
                    break;
                case BuySellDocStateENUM.Problem:
                    disableEditButton = "disabled";
                    disableDeleteButton = "disabled";
                    classForLineItem = "badge-problem";
                    break;
                default:
                    break;

            }

            <tr >
                
                <td class="@classForLineItem " data-toggle="tooltip" title="@tooltip_Date" data-placement="top">
                    @Html.DisplayFor(modelItem => item.MetaData.Created.Date_NotNull_Min)
                </td>
                
                
                <td class="@classForLineItem" data-toggle="tooltip" title="@tooltip_Number" data-placement="top">
                    @Html.DisplayFor(modelItem => item.Name)
                </td>
                
                
                <td class="@classForLineItem" data-toggle="tooltip" title="@tooltip_Name" data-placement="top">
                    <a class="@classForLineItem" href="@edit_order_path">@item.FullName()</a>
                </td>
                
                
                <td class="@classForLineItem @highlightIfPriceDifferentClass" data-toggle="tooltip" title="@tooltip_LiveSale" data-placement="top">
                    @if (@Model.IsShippable(item))
                    {
                        if (item.TotalRemaining != 0)
                        {
                            <span>
                                @string.Format("{0:N2}", item.TotalRemaining)
                            </span>
                        }
                    }
                </td>



                <td class="@classForLineItem" data-toggle="tooltip" title="@tooltip_CompletedSale" data-placement="top">
                    >
                    @if (!@Model.IsShippable(item))
                    {
                        if (item.TotalRemaining != 0)
                        {
                            <span>
                                @string.Format("{0:N2}", item.TotalRemaining)
                            </span>
                        }
                    }
                </td>
                
                
            
                    
                <td class="@classForLineItem" data-toggle="tooltip" title="@tooltip_Comment" data-placement="top">
                    >
                    @item.BuySellDocStateEnum.ToString().ToTitleSentance()


                </td>
                <td class="@classForLineItem">
                    <button data-toggle="tooltip"
                            title="@toolTip_Edit"
                            data-placement="top"
                            class="btn btn-sm btn-success"
                            onclick="openPath('@edit_order_path')"
                            @disableEditButton>

                        <img width="20" src="~/ContentMine/Icons/Edit.png" />
                    </button>
                    <button data-toggle="tooltip"
                            title="@toolTip_Delete"
                            data-placement="top"
                            class="btn btn-sm btn-danger"
                            onclick="openPath('@delete_order_path')"
                            @disableDeleteButton>
                        <img width="20" src="~/ContentMine/Icons/GarbageCan.png" />
                    </button>

                </td>
            </tr>
        }
        <tfoot>
            <tr class="alert-info p-1">
                <th scope="row"></th>
                <th></th>
                <th></th>
                <th><strong>@string.Format("{0:N2}", Model.GrandTotal_Live)</strong></th>
                <th><strong>@string.Format("{0:N2}", Model.GrandTotal_Dead)</strong></th>
                <td></td>
                <th class=""></th>

            </tr>
        </tfoot>
    </table>
}
else
{
    <h2 class="alert-danger">No data!</h2>
}