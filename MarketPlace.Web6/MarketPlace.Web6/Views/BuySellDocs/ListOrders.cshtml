@model ModelsClassLibrary.ModelsNS.DocumentsNS.BuySellDocNS.BuySellStatementModel



@{


    ModelsClassLibrary.ModelsNS.DocumentsNS.BuySellDocNS.BuySellDocViewStateNS.IBuySellDocViewState viewState = Model.BuySellDocViewState;

    ViewBag.Title = "Order List";


    //string editIcon = @"/ContentMine/Icons/Edit.png";
    //string viewIcon = @"/ContentMine/Icons/View.png";
    //string deleteIcon = @"/ContentMine/Icons/GarbageCan.png";
    //string editBtnIcon = editIcon;
    //string deleteBtnIcon = deleteIcon;
    string colorFor_RequestUnconfirmed_pill = viewState.ClassFor_RequestUnconfirmed_Pill;
    string colorFor_RequestConfirmed_pill = viewState.ClassFor_RequestConfirmed_Pill;
    string colorFor_BeingPreparedForShipmentBySeller_pill = viewState.ClassFor_BeingPreparedForShipmentBySeller_Pill;
    string colorFor_ReadyForShipment_pill = viewState.ClassFor_ReadyForShipment_Pill;
    string colorFor_CourierAccepted_pill = viewState.ClassFor_CourierAccepted_Pill;
    string colorFor_ConfirmedByCourier_pill = viewState.ClassFor_ConfirmedByCourier_Pill;
    string colorFor_PickedUp_pill = viewState.ClassFor_PickedUp_Pill;
    string colorFor_Delivered_pill = viewState.ClassFor_Delivered_Pill;
    string colorFor_Canceled_pill = viewState.ClassFor_Canceled_Pill;
    string colorFor_Rejected_pill = viewState.ClassFor_Rejected_Pill;
    string colorFor_Problem_pill = viewState.ClassFor_Problem_Pill;
    string colorFor_OptingOut_pill = viewState.ClassFor_OptingOut_Pill;


    string tooltip_Request_Unconfirmed = "When an order has Request Unconfirmed status it means that the a potential buyer is thinking of purchasing this item. The sale has not been confirmed yet";
    string tooltip_Request_Confirmed = "When an order has Request Confirmed status it means that the sale has been confirmed by the buyer. This can be executed. If the price is red, it means that the price has been changed.";
    string tooltip_BeingPreparedForShipmentBySeller = "The item has been confirmed by the seller. He is promising to ship the product.";
    string tooltip_ReadyForShipment = "The item is ready for shipment. If a courier has not been designated, a courier company is being found.";
    string tooltip_ConfirmedByCourier = "A courier has confirmed they will pick the product.";
    string tooltip_PickedUp = "The product has been picked up by the courier.";
    string tooltip_Delivered = "The product has been delivered to the customer.";

    string tooltip_Canceled = viewState.OL_Cancel_Button_ToolTip;
    string tooltip_Rejected = viewState.OL_Reject_Button_ToolTip;
    string tooltip_Problem = "There is a problem";
    string tooltip_OptingOut = string.Format( "You can opt out of our system and handle your own order. You will be required to pay a small handling charge of Rs{0:N2}.",
        ModelsClassLibrary.ModelsNS.DocumentsNS.BuySellDocNS.BuySellDoc.Get_Opt_Out_Fee());

    bool showBFs = false;

    string path_live_Orders_BF = "";
    int colSpan = 7;
    bool hideOrderCompleteCol = viewState.OL_HideCompletedCol;
    bool hideOrderCol = viewState.OL_HideOrderedCol;


    @Html.Partial("_messages")

    if (hideOrderCol && hideOrderCompleteCol)
    {
        colSpan = 5;
    }
    else
    {
        if (!hideOrderCol && !hideOrderCompleteCol)
        {
            colSpan = 7;
        }
        else
        {
            colSpan = 6;

        }
    }
}

<style>
    a:hover {
        color: white;
        background-color: navy;
    }
</style>

@if (!Model.Docs.IsNullOrEmpty())
{
    string path_live_Orders_BF_ToolTip = "Click here to see older live orders.";
    string fromDateString = new DateTime(Model.FromDate.Year, Model.FromDate.Month, Model.FromDate.Day).ToShortDateString();
    //string path_live_Orders_BF = Url.Action("List_Live_PurchasesOrders", "BuySellDocs") + "?toDateString=" + fromDateString;


    switch (Model.BuySellDocumentTypeEnum)
    {
        case BuySellDocumentTypeENUM.Sale:
            showBFs = true;
            path_live_Orders_BF = Url.Action("List_Live_PurchasesOrders", "BuySellDocs", new { toDateString = fromDateString, isAdmin = Model.IsAdmin, BuySellDocumentTypeEnum = BuySellDocumentTypeENUM.Sale });
            break;

        case BuySellDocumentTypeENUM.Purchase:
            showBFs = true;
            path_live_Orders_BF = Url.Action("List_Live_PurchasesOrders", "BuySellDocs", new { toDateString = fromDateString, isAdmin = Model.IsAdmin, BuySellDocumentTypeEnum = BuySellDocumentTypeENUM.Purchase });
            break;

        case BuySellDocumentTypeENUM.Unknown:
        default:
            showBFs = false;
            break;
    }




    <table class=" table  table-striped table-light table-hover table-bordered">
        <caption>
            <div class="alert alert-dark">
                <span class="@colorFor_RequestUnconfirmed_pill" data-toggle="tooltip" title="@tooltip_Request_Unconfirmed" data-placement="top">Request Unconfirmed</span>
                <span><img src="~/ContentMine/Icons/RightArrow.png" /></span>
                <span class="@colorFor_RequestConfirmed_pill" data-toggle="tooltip" title="@tooltip_Request_Confirmed" data-placement="top">Request Confirmed</span>
                <span><img src="~/ContentMine/Icons/RightArrow.png" /></span>
                <span class="@colorFor_BeingPreparedForShipmentBySeller_pill" data-toggle="tooltip" title="@tooltip_BeingPreparedForShipmentBySeller" data-placement="top">Confirmed By Seller</span>
                <span><img src="~/ContentMine/Icons/RightArrow.png" /></span>
                <span class="@colorFor_ReadyForShipment_pill" data-toggle="tooltip" title="@tooltip_ReadyForShipment" data-placement="top">Ready For Shipment</span>
                <span><img src="~/ContentMine/Icons/RightArrow.png" /></span>
                <span class="@colorFor_ConfirmedByCourier_pill" data-toggle="tooltip" title="@tooltip_ConfirmedByCourier" data-placement="top">Ready For Shipment</span>
                <span><img src="~/ContentMine/Icons/RightArrow.png" /></span>
                <span class="@colorFor_ConfirmedByCourier_pill" data-toggle="tooltip" title="@tooltip_ConfirmedByCourier" data-placement="top">Confirmed By Courier</span>
                <span><img src="~/ContentMine/Icons/RightArrow.png" /></span>
                <span class="@colorFor_PickedUp_pill" data-toggle="tooltip" title="@tooltip_PickedUp" data-placement="top">Picked Up</span>
                <span><img src="~/ContentMine/Icons/RightArrow.png" /></span>
                <span class="@colorFor_Delivered_pill" data-toggle="tooltip" title="@tooltip_Delivered" data-placement="top">Delivered</span>
                <span class="@colorFor_Rejected_pill" data-toggle="tooltip" title="@tooltip_Rejected" data-placement="top">Rejected</span>
                <span class="@colorFor_Canceled_pill" data-toggle="tooltip" title="@tooltip_Canceled" data-placement="top">Canceled</span>
                <span class="@colorFor_Problem_pill" data-toggle="tooltip" title="@tooltip_Problem" data-placement="top">Problem</span>
                <span class="@colorFor_OptingOut_pill" data-toggle="tooltip" title="@tooltip_OptingOut" data-placement="top">Opt Out Of System</span>
            </div>
        </caption>
        <thead>
            <tr class="alert-info p-1 text-center">
                <th scope="row" colspan="@colSpan">
                    <h5>
                        <span class="text-success ">@Model.MainHeading</span> -
                        <small>
                            <span class="text-success ">@Model.SubHeading</span>
                        </small>

                    </h5>

                </th>
            </tr>
        </thead>

        <tr>
            <th>
                Date
            </th>
            <th>
                Number
            </th>
            <th>
                From/To
            </th>


            @if (hideOrderCol)
            { }
            else
            {
                <th>
                    Order
                </th>
            }

            @if (hideOrderCompleteCol)
            { }
            else
            {

                <th>
                    Completed
                </th>
            }
            <th>
                Comment
            </th>
            <th>

            </th>
        </tr>

        @*Running balance*@
        @if (showBFs)
        {
            <tr>
                <td>
                    Up to
                </td>
                <td>
                    Various
                </td>
                <td>

                    Brought forward

                </td>
                @if (hideOrderCol)
                { }
                else
                {
                    <td>
                        <span>
                            <a href="@path_live_Orders_BF" data-toggle="tooltip" title="@path_live_Orders_BF_ToolTip" data-placement="left">@string.Format("{0:N2}", Model.Live_BF)</a>

                        </span>
                    </td>
                }
                @if (hideOrderCompleteCol)
                { }
                else
                {
                    <td>
                        <span>
                            <a href="@path_live_Orders_BF" data-toggle="tooltip" title="@path_live_Orders_BF_ToolTip" data-placement="left">@string.Format("{0:N2}", Model.Dead_BF)</a>

                        </span>
                    </td>
                }
                <td>
                    Old Orders
                </td>
                <td></td>
            </tr>
        }

        @*===================================================================================*@

        @foreach (ModelsClassLibrary.ModelsNS.DocumentsNS.BuySellDocNS.BuySellDoc item in Model.Docs.ToList())
        {
            viewState = Model.GetBuySellDocViewState(item.BuySellDocStateEnum, item.BuySellDocumentTypeEnum, item.Customer, item.Owner);

            //string edit_order_path = "";



            string classForLineItem = "";


            string highlightIfPriceDifferentClass = "";

            //string toolTip_Delete = viewState.OL_DELETE_Button_ToolTip;

            string tooltip_Date = "This is the date of the order";
            string tooltip_Number = "This is the order number";
            string tooltip_Name = "This is item that is being sold or bought";
            string tooltip_LiveSale = "this is the total sale. If it is highlighted in red, then the price has been changed.";
            string tooltip_CompletedSale = "This sale has been completed, delivered.";
            string tooltip_Comment = "This is the status of the sale. A comment by the system. This is color coded. Look below at the legend.";


            //Edit/View Button
            string edit_order_path = Url.Action("Edit", "BuySellDocs", new { id = item.Id, returnUrl = Request.Url.PathAndQuery, buySellDocumentTypeEnum = Model.BuySellDocumentTypeEnum });
            
            string toolTip_Edit = viewState.OL_ToolTip_Edit;
            string editBtnIcon = viewState.OL_IconForEditView;
            string disableEditButton = viewState.OL_IsEditEnabled ? "" : " disabled ";
            bool show_Edit_Button = viewState.OL_IsShowEditButton;


            //Delete Button
            string delete_order_path = Url.Action("Delete", "BuySellDocs", new { Id = item.Id, returnUrl = Request.Url.PathAndQuery, buySellStatementType = AliKuli.ConstantsNS.MyConstants.PURCHASE_ORDER_STATEMENT });
            string disableDeleteButton = viewState.OL_IsDeleteEnabled ? "" : " disabled ";
            string deleteBtnIcon = viewState.OL_IconForDeleteView;
            bool show_Delete_Button = viewState.OL_IsShowDeleteButton;
            string toolTip_Delete_Button = viewState.OL_DELETE_Button_ToolTip;





            //Cancel Button
            tooltip_Canceled = item.BuySellDocViewState.OL_Cancel_Button_ToolTip;
            string path_Cancel_Order = Url.Action("CancelRejectOrder", "BuySellDocs", new { buySellDocId = item.Id, returnUrl = Request.Url.PathAndQuery, text = tooltip_Canceled, buySellDocumentTypeEnum = Model.BuySellDocumentTypeEnum, buySellDocStateModifierEnum = BuySellDocStateModifierENUM.Cancel });

            string cancelButtonIcon = viewState.OL_IconForCancel;
            bool show_Cancel_Button = viewState.OL_IsShowCancelButton;
            //string tooltip_Cancele_Button = viewState.OL_Cancel_Button_ToolTip;

            string disableCancelButton = viewState.OL_IsCanceledEnabled ? "" : " disabled ";

            if (item.BuySellDocStateEnum == BuySellDocStateENUM.Delivered)
            {
                tooltip_Canceled += item.GetDateGuaranteeExpires().ToShortDateString();

                if (item.IsGuaranteePeriodIsOver())
                {
                    disableCancelButton = " disabled ";

                }

            }

            //Reject Button
            tooltip_Rejected = item.BuySellDocViewState.OL_Reject_Button_ToolTip;
            string path_Reject_Order = Url.Action("CancelRejectOrder", "BuySellDocs", new { buySellDocId = item.Id, returnUrl = Request.Url.PathAndQuery, text = tooltip_Rejected, buySellDocumentTypeEnum = Model.BuySellDocumentTypeEnum, buySellDocStateModifierEnum = BuySellDocStateModifierENUM.Reject });
            string disableRejectButton = viewState.OL_IsRejectEnabled ? "" : " disabled ";
            string rejectBtnIcon = viewState.OL_IconForReject;
            bool show_Reject_Button = viewState.OL_IsShowReject;
            string tooltip_Reject_Button = viewState.OL_Reject_Button_ToolTip;

            string itemPicture = Url.Content(item.PictureAddressPathAny());

            classForLineItem = viewState.CurrentColorClass;
            highlightIfPriceDifferentClass = item.IsAllItemPricesOriginal ? "" : " badge-problem ";

            <tr class="small" style="border: 10px solid white">
                <td class="@classForLineItem " data-toggle="tooltip" title="@tooltip_Date" data-placement="top">
                    @Html.DisplayFor(modelItem => item.MetaData.Created.Date_NotNull_Min)
                </td>


                <td class="@classForLineItem" data-toggle="tooltip" title="@tooltip_Number" data-placement="top">
                    @Html.DisplayFor(modelItem => item.Name)
                </td>


                <td class="@classForLineItem" data-toggle="tooltip" title="@tooltip_Name" data-placement="top">
                    <div class="row">
                        <div class="col-auto p-2">
                            <img src="@itemPicture" class="rounded" alt="Cinque Terre" height="50">

                        </div>
                        <div class="col p-2">

                            <a class="@classForLineItem" href="@edit_order_path">@item.AnchorDescriptionInOrderListItem()</a>
                            @if (item.IsShowFreightMessage)
                            {
                                if (@item.CurrentUsers_FreightOfferTrx_String(Model.CurrentUsers_DeliverymanId).IsNullOrWhiteSpace())
                                {
                                }
                                else
                                {
                                    if (item.FreightOfferTrxAcceptedId.IsNullOrWhiteSpace())
                                    {
                                        <p class="bg-warning text-dark p-1">
                                            @item.CurrentUsers_FreightOfferTrx_String(Model.CurrentUsers_DeliverymanId)
                                        </p>
                                    }
                                    else
                                    {
                                        <p class="bg-danger text-white p-1">
                                            @item.CurrentUsers_FreightOfferTrx_String(Model.CurrentUsers_DeliverymanId)
                                        </p>
                                    }
                                }
                                if (@item.FreightOfferTrxs.IsNullOrEmpty())
                                {

                                }
                                else
                                {
                                    if (item.BuySellDocStateEnum == BuySellDocStateENUM.ReadyForPickup)
                                    {
                                        if (@item.FreightOfferTrxs.Where(x => x.MetaData.IsDeleted == false).ToList().IsNullOrEmpty())
                                        {

                                        }
                                        else
                                        {
                                            int count = @item.FreightOfferTrxs.Where(x => x.MetaData.IsDeleted == false).Count();
                                            <p class="bg-info text-warning p-2">
                                                @{string noOfBids = count == 1 ? count.ToString("N0") + " Bid" : count.ToString("N0") + " Bids"; }
                                                @noOfBids
                                            </p>
                                        }
                                    }
                                }
                            }
                        </div>
                    </div>
                </td>


                @if (hideOrderCol)
                { }
                else
                {
                    <td class="@classForLineItem @highlightIfPriceDifferentClass" data-toggle="tooltip" title="@tooltip_LiveSale" data-placement="top">
                        @if (item.TotalOrdered != 0)
                        {
                            <span>
                                @string.Format("{0:N2}", item.TotalOrdered)
                            </span>
                        }
                    </td>
                }

                @if (hideOrderCompleteCol)
                { }
                else
                {
                    <td class="@classForLineItem" data-toggle="tooltip" title="@tooltip_CompletedSale" data-placement="top">
                        @if (item.TotalOrdered != 0)
                        {
                            <span>
                                @string.Format("{0:N2}", item.TotalCompleted)
                            </span>
                        }
                    </td>
                }

                @*this is the guarantee message*@

                <td class="@classForLineItem" data-toggle="tooltip" title="@tooltip_Comment" data-placement="top">
                    @item.BuySellDocStateEnum.ToString().ToTitleSentance()
                    @item.Get_BuySellDocState_Date_Controller()
                </td>



                @*Edit/View Button*@
                <td class="@classForLineItem">

                    @if (@show_Edit_Button)
                    {
                        <button data-toggle="tooltip"
                                title="@toolTip_Edit"
                                data-placement="top"
                                class="btn btn-sm btn-success m-1"
                                onclick="openPath('@edit_order_path')"
                                @disableEditButton>

                            <img width="20" src=@editBtnIcon />
                        </button>
                    }

                    @if (show_Delete_Button)
                    {
                        @*Delete Button*@
                        <button data-toggle="tooltip"
                                title="@toolTip_Delete_Button"
                                data-placement="top"
                                class="btn btn-sm btn-danger m-1"
                                onclick="openPath('@delete_order_path')"
                                @disableDeleteButton>
                            <img width="20" src=@deleteBtnIcon />
                        </button>
                    }



                    @if (show_Reject_Button)
                    {
                        //Reject Button
                        <button data-toggle="tooltip"
                                title="@tooltip_Rejected"
                                data-placement="top"
                                class="btn btn-sm btn-info m-1"
                                onclick="openPath('@path_Reject_Order')"
                                @disableRejectButton>
                            <img width="20" src=@rejectBtnIcon />
                        </button>
                    }

                    @if (show_Cancel_Button)
                    {
                        //Reject Button
                        <button data-toggle="tooltip"
                                title="@tooltip_Canceled"
                                data-placement="top"
                                class="btn btn-sm btn-info m-1"
                                onclick="openPath('@path_Cancel_Order')"
                                @disableCancelButton>
                            <img width="20" src=@cancelButtonIcon />
                        </button>
                    }


                </td>
            </tr>
        }
        <tfoot>
            <tr class="alert-info p-1">
                <th scope="row"></th>
                <th></th>
                <th></th>
                @if (hideOrderCol)
                { }
                else
                {

                    <th><strong class="pull-right">@string.Format("{0:N2}", Model.GrandTotal_OpenOrders)</strong></th>
                }
                @if (hideOrderCompleteCol)
                { }
                else
                {

                    <th><strong class="pull-right">@string.Format("{0:N2}", Model.GrandTotal_ClosedOrders)</strong></th>
                }
                <th></th>
                <th class=""></th>
            </tr>
        </tfoot>
    </table>
}
else
{
    <h2 class="alert-danger">No data!</h2>
}