@model ModelsClassLibrary.ModelsNS.DocumentsNS.BuySellItemNS.BuySellItem

@{
    ModelsClassLibrary.ModelsNS.DocumentsNS.BuySellDocNS.BuySellDocViewStateNS.IBuySellDocViewState viewState = Model.BuySellDoc.BuySellDocViewState;

    bool orderedAmount_Enabled = viewState.OD_OrderedIsEnabled;
    bool salePriceIsEnabled = viewState.OD_SalePriceIsEnabled;
    bool showOriginalPrice = Model.SalePrice != Model.OriginalPrice;
    bool hideOriginalQuantity = Model.Quantity.IsOrderSameAsOriginal;
    string labelOrderOrShipped = viewState.OD_LabelOrderOrShipped;


    if (Model.IsDeleting)
    {
        salePriceIsEnabled = false;
    }

}

<div class="well p-3 m-3">

    @Html.HiddenFor(x => x.BuySellDocId)
    @Html.HiddenFor(x =>x.Name)
    @Html.HiddenFor(x => x.IsUserOwned)
    @Html.HiddenFor(x => x.BuySellDocumentTypeEnum)
    @Html.HiddenFor(x => x.BuySellDocStateEnum)

    <div class="form-group">
            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "col-2" })
            @Html.EditorFor(model => model.Name, new { htmlAttributes = AliKuli.Extentions.HtmlHelpers.GetHtmlAttributes(new { title = "Name", @class = "form-control col-2", data_toggle = "tooltip", data_placement = "top", disabled = "disabled"}, null) })
    </div>






    @if (orderedAmount_Enabled)
    {
        <div class="form-group">
            @Html.LabelFor(model => model.Quantity.Order, htmlAttributes: new { @class = "col-2" })
            @Html.EditorFor(model => model.Quantity.OrderStr, new { htmlAttributes = AliKuli.Extentions.HtmlHelpers.GetHtmlAttributes(new { title = "Quantity Ordered", @class = "form-control col-2", data_toggle = "tooltip", data_placement = "top", onchange = "getTotalShipping()" }, null) })
        </div>

    }
    else
    {
        @Html.HiddenFor(x => x.Quantity.OrderStr)
        <div class="form-group">

            @*@Html.LabelFor(model => model.Quantity.Order, htmlAttributes: new { @class = "col-2" })*@
            <label class="col-2">
                @labelOrderOrShipped
            </label>

            @Html.EditorFor(model => model.Quantity.OrderStr, new { htmlAttributes = AliKuli.Extentions.HtmlHelpers.GetHtmlAttributes(new { title = "Quantity Ordered", @class = "form-control col-2", data_toggle = "tooltip", data_placement = "top", disabled ="disabled" }, null) })
        </div>

    }
        




    @if(hideOriginalQuantity)
    { }
    else
    { 
        <div class="form-group">
            @Html.LabelFor(model => model.Quantity.Order_Original, htmlAttributes: new { @class = "col-2" })
            @Html.EditorFor(model => model.Quantity.Order_Original, new { htmlAttributes = AliKuli.Extentions.HtmlHelpers.GetHtmlAttributes(new { title = "Original Quantity Ordered. This will change if you update the quantity", @class = "form-control col-2", disabled = "disabled" }, null) })
        </div>
    }









    @if (salePriceIsEnabled)
    {
        <div class="form-group">
            @Html.LabelFor(model => model.SalePriceStr, htmlAttributes: new { @class = "col-2" })
            @Html.EditorFor(model => model.SalePriceStr, new { htmlAttributes = AliKuli.Extentions.HtmlHelpers.GetHtmlAttributes(new { title = "Sale price", @class = "form-control col-2", data_toggle = "tooltip", data_placement = "top", onchange = "getTotalShipping()" }, null) })
        </div>

    }
    else
    {
        @Html.HiddenFor(x => x.SalePriceStr);
        <div class="form-group">
            @Html.LabelFor(model => model.SalePriceStr, htmlAttributes: new { @class = "col-2" })
            @Html.EditorFor(model => model.SalePriceStr, new { htmlAttributes = AliKuli.Extentions.HtmlHelpers.GetHtmlAttributes(new { title = "Sale price", @class = "form-control col-2", data_toggle = "tooltip", data_placement = "top", disabled = "disabled" }, null) })
        </div>

    }






    <div class="form-group">
        <label class="col-2" for="ShippedRs_Formatted">Total</label> 
        @Html.EditorFor(model => model.OrderedRs_Formatted, new { htmlAttributes = AliKuli.Extentions.HtmlHelpers.GetHtmlAttributes(new { title = "This is the total sale amount", @class = "form-control col-2", data_toggle = "tooltip", data_placement = "top", disabled = "disabled" }, null) })
    </div>

    @*@Html.HiddenFor(x => x.OriginalPrice)*@
    @*@Html.HiddenFor(x => x.OriginalPrice)*@
    @Html.HiddenFor(x => x.OriginalPrice_Formatted)
    @if(@showOriginalPrice)
    { 
        <div class="alert alert-info ">
            <div class="form-group">
                @Html.HiddenFor(x => x.OriginalPrice)
                @Html.LabelFor(model => model.OriginalPrice, htmlAttributes: new { @class = "col-2" })
                @Html.EditorFor(model => model.OriginalPrice_Formatted, new { htmlAttributes = AliKuli.Extentions.HtmlHelpers.GetHtmlAttributes(new { title = "This what the seller wants to sell at", @class = "form-control col-2", data_toggle = "tooltip", data_placement = "top", disabled = "disabled" }, null) })
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Difference_Formatted, htmlAttributes: new { @class = "col-2" })
                @Html.EditorFor(model => model.Difference_Formatted, new { htmlAttributes = AliKuli.Extentions.HtmlHelpers.GetHtmlAttributes(new { title = "Difference in the Sale price", @class = "form-control col-2", data_toggle = "tooltip", data_placement = "top", disabled = "disabled" }, null) })
            </div>
        </div>
    }
    else
    {

    }

</div>

@Html.Partial("_DeliveryButton")








