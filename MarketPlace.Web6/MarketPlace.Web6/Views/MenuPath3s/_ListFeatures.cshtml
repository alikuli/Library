@model ModelsClassLibrary.MenuNS.MenuPath3

@{
    int count = 0;
    string controller = this.ViewContext.RouteData.Values["controller"].ToString();
    string returnUrl = Request.Url.PathAndQuery;

    IEnumerable<ModelsClassLibrary.ModelsNS.FeaturesNS.MenuFeature> features = null;
    if(!Model.MenuFeatures.IsNull())
    { 
        features = Model.MenuFeatures.Where(x => x.MetaData.IsDeleted == false).OrderBy(x => x.Name).AsEnumerable();
        
    }
    
    
    
}
<p>
    @Html.ActionLink("Add Feature", "AddFeature", "MenuPath3s", new { id = Model.Id, parentName = Model.FullName(), returnUrl = returnUrl }, new { @class = "btn btn-info" })
</p>



<table class="table table-striped table-hover table-info" >
    <tr>
        <th>Sr #</th>
        <th>
            Feature Name
        </th>
        <th></th>
    </tr>

    @if (features.IsNull())
    {
        <tr>
            <td>
                <span>No Added Features</span>
            </td>
        </tr>
    }
    else
    { 
        foreach (var item in features)
        {
            <tr>
                <td>
                    @{
                        count++;
                        string deleteToolTip = string.Format("Delete Feature '{0}'",item.Name);
                     }
                    @count)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Name)
                </td>

                <td>
                    <span data-toggle="tooltip" title="@deleteToolTip" data-placement="top">
                        @Html.ActionLink(" ", "DeleteFeature", "MenuPath3s", new { menuPathid = Model.Id, menuFeatreId = item.Id, returnUrl = returnUrl }, new { @class = "fas fa-trash-alt text-danger" })
                    </span>
</td>
            </tr>
}
    }
</table>
