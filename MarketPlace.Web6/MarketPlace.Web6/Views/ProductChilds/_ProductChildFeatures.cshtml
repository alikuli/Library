@model ModelsClassLibrary.ModelsNS.ProductChildNS.ProductChild

@{
    string childReturnUrl = Request.Url.PathAndQuery;
    string create_feature_Path = Url.Action("Create", "ProductChildFeatures", new { productChildId = Model.Id, returnUrl = childReturnUrl });
}

<div class="well p-3 mt-3">
    <div class="form-group">
        <span data-toggle="tooltip" title="If you want to hide a product feature, enter a new feature with the same name here, but then leave the description blank." data-placement="top">

            <a href="@create_feature_Path">
                <img class="m-2" src="~/ContentMine/Icons/plusSign.png" /> Create New Feature
            </a>
        </span>
        <table class="table table-hover table-info table-light table-bordered">
            <thead>
                <tr>
                    <th>Feature</th>
                    <th>Value</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model.ProductChildFeatures.Where(x => x.MetaData.IsDeleted == false).OrderBy(x => x.Name).ToList())
                {
                    string editToolTip = string.Format("Edit: '{0}'", item.Name);
                    string featureToolTip = string.Format("Feature: '{0} This is the name of the feature you want to describe. It is searchable by your customers whenever they want to buy. Create as many features as you like. They can help you sell.", item.Name);
                    string valueToolTip = string.Format("This describes '{0}.'Keep the desciption short and simple. If you leave it blank, this feature will not show for '{0}'", item.Name);
                    string deleteToolTip = string.Format("Delete: '{0}'. Idea! Make it's value empty. It will seem that it is deleted. ", item.Name);
                    string edit_Feature_Path = Url.Action("Edit", "ProductChildFeatures", new { id = item.Id, returnUrl = childReturnUrl });
                    string delete_Feature_Path = Url.Action("Delete", "ProductChildFeatures", new { id = item.Id, returnUrl = childReturnUrl });

                    <tr>
                        <td>
                            <div class="form-group" data-toggle="tooltip" title="@featureToolTip" data-placement="top">
                                @Html.EditorFor(model => item.Name, new { htmlAttributes = new { @class = "form-control", disabled = "disabled" } })
                            </div>

                        </td>

                        <td>
                            <div class="form-group" data-toggle="tooltip" title="@valueToolTip" data-placement="top">
                                @Html.EditorFor(model => item.Comment, new { htmlAttributes = new { @class = "form-control", disabled = "disabled" } })
                            </div>

                        </td>

                        <td>
                            <span data-toggle="tooltip" title="@editToolTip" data-placement="top">
                                <a href="@edit_Feature_Path" class="btn btn-success m-1">

                                    <img src="~/ContentMine/Icons/Edit.png" width="20" />
                                </a>
                            </span>


                            <span data-toggle="tooltip" title="@deleteToolTip" data-placement="top">
                                <a href="@delete_Feature_Path" class="btn btn-danger m-1">
                                    <img src="~/ContentMine/Icons/GarbageCan.png" width="20" />
                                </a>

                            </span>

                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>
