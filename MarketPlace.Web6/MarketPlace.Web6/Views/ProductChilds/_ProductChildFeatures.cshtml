@model ModelsClassLibrary.ModelsNS.ProductChildNS.ProductChild

@{
    int count = 0;
    string childReturnUrl = Request.Url.PathAndQuery;
 }


<div class="well p-3 m-3">
    <div class="form-group">
        @*<div class="control-label">
            @Html.ActionLink("Add Another Feature", "Create", "ProductFeatures", new { productId = Model.Id }, new { @class = "btn btn-success" })
        </div>*@
        @if (!@Model.ProductChildFeatures.IsNull())
        {

            if (Model.MenuManager.IsCreate)
            {
                <div class="alert-info p-3">
                    To Add a new feature, select Add Product Feature from the Product Menu.
                </div>
                <table class="table table-borderless">
                    <thead>
                        <tr>
                            <th>Feature</th>
                            <th>Value</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Model.ProductChildFeatures.Where(x => x.MetaData.IsDeleted == false).OrderBy(x => x.Name).ToList())
                        {
                            string nameValue = item.Name;
                            string nameId = string.Format("ProductChildFeatures_{0}__Name", count);
                            string nameOfFeature = string.Format("ProductChildFeatures[{0}].Name", count);

                            string commentId = string.Format("ProductChildFeatures_{0}__Comment", count);
                            string commentName = string.Format("ProductChildFeatures[{0}].Comment", count);
                            string comentValue = item.Comment;


                            string productChildIdId = string.Format("ProductChildFeatures_{0}__ProductChildId", count);
                            string productChildName = string.Format("ProductChildFeatures[{0}].ProductChildId", count);
                            string productChildValue = item.ProductChildId;


                            count++;

                            <tr>
                                <td>
                                    <input id="@nameId"
                                           name="@nameOfFeature"
                                           type="text"
                                           value="@nameValue" />

                                    <input id="@productChildIdId"
                                           name="@productChildName"
                                           type="hidden"
                                           value="@productChildValue" />




                                </td>

                                <td>
                                    <input class="text-box single-line"
                                           id="@commentId"
                                           name="@commentName"
                                           type="text"
                                           value="@comentValue" />

                                    <span class="field-validation-valid text-danger"
                                          data-valmsg-for="@commentName"
                                          data-valmsg-replace="true"></span>

                                </td>
                            </tr>

                        }
                    </tbody>
                </table>
            }
            else
            {
                @Html.ActionLink(" Create", "Create", "ProductChildFeatures", new { productChildId = Model.Id, returnUrl = childReturnUrl }, new { @class = "fas fa-plus-square text-success" })
                <table class="table table-borderless table-info ">
                    <thead>
                        <tr>
                            <th>Feature</th>
                            <th>Value</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Model.ProductChildFeatures.Where(x => x.MetaData.IsDeleted == false).OrderBy(x => x.Name).ToList())
                        {
                            string editToolTip = string.Format("Edit: {0}", item.Name);
                            string deleteToolTip = string.Format("Delete: {0}. You can also make it's value empty which will make it seem that it is deleted. ", item.Name);
                            <tr>
                                <td>
                                    <div class="form-group">
                                        @Html.EditorFor(model => item.Name, new { htmlAttributes = new { @class = "form-control", disabled = "disabled" } })
                                    </div>

                                </td>

                                
                                <td>
                                    <div class="form-group">
                                        @Html.EditorFor(model => item.Comment, new { htmlAttributes = new { @class = "form-control", disabled = "disabled" } })
                                    </div>

                                </td>


                                <td>
                                    <span data-toggle="tooltip" title="@editToolTip" data-placement="top">
                                        @Html.ActionLink(" ", "Edit", "ProductChildFeatures", new
                                   { 
                                       @*menuPathid = Model.Id, menuFeatreId = item.Id,*@ 
                                        id = item.Id,
                                        returnUrl = childReturnUrl
                                   }, new { @class = "fas fa-edit text-success" })
                                    </span>


                                    <span data-toggle="tooltip" title="@deleteToolTip" data-placement="top">
                                        @Html.ActionLink(" ", "Delete", "ProductChildFeatures", new
                                                { 
                                                    @*menuPathid = Model.Id, menuFeatreId = item.Id,*@
                                                    id = item.Id,
                                                    returnUrl = childReturnUrl
                                                },
                                    new { @class = "fas fa-trash-alt text-danger" })
                                    </span>

                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        }
    </div>
</div>

