@*https://www.bootply.com/jf5wQlQVGI*@
@*https://stackoverflow.com/questions/24276367/how-to-make-an-entire-bootstrap-thumbnail-clickable-for-mobile-and-tablet*@

@*https://stackoverflow.com/questions/24590222/bootstrap-3-grid-with-different-height-in-each-item-is-it-solvable-using-only*@
@*<style>
        .akaFix
        {
            display:flex;
            flex-wrap:wrap;
            width:100%;
        }
    </style>*@

@model ModelsClassLibrary.ViewModels.IndexListVM

@{
    int count = 0;
    string returnurl = Request.Url.PathAndQuery;
    Model.MenuManager.MenuState.ControllerCurrentName = this.ViewContext.RouteData.Values["controller"].ToString();
    string currController = Model.MenuManager.MenuState.ControllerCurrentName;
    string editController = Model.MenuManager.MenuState.CreateAndEditLink_ControllerName;
    bool isProductChild = Model.MenuManager.MenuState.IsProductChild;
    ModelsClassLibrary.ViewModels.IndexItemVM[] IndexListVMArray = Model.DataSortedAndFilteredArray;
    string userId = Model.UserId ?? "";
    string commentUrl = "";
    string classSmileFace = " far fa-smile ";
    string classUnhappyFace = "far fa-frown-open";
    ModelsClassLibrary.ViewModels.IndexItemVM currIndexItemVM = null;
    string shortNameOfProduct = "";
}



<div class="">
    <div class=" text-center text-lg-left akaFix">


        @for (int i = 0; i < IndexListVMArray.Length; i++)
        {
            count = i;
            currIndexItemVM = IndexListVMArray[i];

            string imagePath = "";
            string mainMenuPath = "";
            string alert = (@Model.SelectedIdMatchesThis(IndexListVMArray[i].Id) ? "alert-info " : " ");
            string alertFont = (@Model.SelectedIdMatchesThis(IndexListVMArray[i].Id) ? " text-danger " : " ");
            string modalBoxId = "myModal" + count;
            string modalBoxIdInButton = "#" + modalBoxId;
            string modalLabelId = "modalLabelId" + count;
            string menuPath1Id = "";
            string menuPath2Id = "";
            string menuPath3Id = "";
            string productId = "";
            string productChildId = "";
            string idForEdit = "";
            string menuPathMainId = "";


            if (count % 2 == 0)
            {
                alert += " background-ltgrey ";
            }




            if (IndexListVMArray[i].IsImageThere)
            {
                imagePath = Url.Content(IndexListVMArray[i].ImageAddressStr);
            }




            //this has to be updated for the menu
            if (Model.MenuManager.MenuState.IsMenu)
            {

                switch (Model.MenuManager.MenuState.MenuEnum)
                {
                    case MenuENUM.IndexMenuProductChild:
                        mainMenuPath = Url.Action("ProductOwner", currController, new { id = IndexListVMArray[i].Id, menuEnum = Model.MenuManager.MenuState.NextMenu, });
                        break;
                    default:
                        mainMenuPath = Url.Action("index", currController, new { id = IndexListVMArray[i].Id, menuEnum = Model.MenuManager.MenuState.NextMenu, });
                        break;
                }

            }
            else
            {
                mainMenuPath = Url.Action("Edit", editController, new { id = IndexListVMArray[i].Id });
            }


            //if (Model.UserIsAdmin)
            menuPathMainId = "";
            idForEdit = IndexListVMArray[i].Id;

            switch (IndexListVMArray[i].MenuManager.MenuState.MenuEnum)
            {
                case MenuENUM.IndexDefault:
                    break;
                case MenuENUM.IndexMenuPath1:
                    //item is menuPathMain
                    menuPathMainId = IndexListVMArray[i].Id;
                    idForEdit = IndexListVMArray[i].MenuManager.MenuState.MenuPath1Id;
                    menuPath1Id = IndexListVMArray[i].MenuManager.MenuState.MenuPath1Id;
                    break;
                case MenuENUM.IndexMenuPath2:
                    //item is menuPathMain
                    menuPathMainId = IndexListVMArray[i].Id;
                    idForEdit = IndexListVMArray[i].MenuManager.MenuState.MenuPath2Id;
                    menuPath1Id = IndexListVMArray[i].MenuManager.MenuState.MenuPath1Id;
                    menuPath2Id = IndexListVMArray[i].MenuManager.MenuState.MenuPath2Id;

                    break;
                case MenuENUM.IndexMenuPath3:
                    //item is menuPathMain
                    menuPathMainId = IndexListVMArray[i].Id;
                    idForEdit = IndexListVMArray[i].MenuManager.MenuState.MenuPath3Id;
                    menuPath1Id = IndexListVMArray[i].MenuManager.MenuState.MenuPath1Id;
                    menuPath2Id = IndexListVMArray[i].MenuManager.MenuState.MenuPath2Id;
                    menuPath3Id = IndexListVMArray[i].MenuManager.MenuState.MenuPath3Id;
                    break;
                case MenuENUM.IndexMenuProduct:
                    //item is product
                    //productId = IndexListVMArray[i].Id;
                    idForEdit = IndexListVMArray[i].MenuManager.MenuState.ProductId;
                    menuPath1Id = IndexListVMArray[i].MenuManager.MenuState.MenuPath1Id;
                    menuPath2Id = IndexListVMArray[i].MenuManager.MenuState.MenuPath2Id;
                    menuPath3Id = IndexListVMArray[i].MenuManager.MenuState.MenuPath3Id;
                    break;
                case MenuENUM.IndexMenuProductChild:
                    //item is productChild
                    //productChildId = IndexListVMArray[i].Id;
                    idForEdit = IndexListVMArray[i].MenuManager.MenuState.ProductChildId;
                    idForEdit = IndexListVMArray[i].MenuManager.MenuState.ProductId;
                    menuPath1Id = IndexListVMArray[i].MenuManager.MenuState.MenuPath1Id;
                    menuPath2Id = IndexListVMArray[i].MenuManager.MenuState.MenuPath2Id;
                    menuPath3Id = IndexListVMArray[i].MenuManager.MenuState.MenuPath3Id;
                    productChildId = IndexListVMArray[i].MenuManager.MenuState.ProductChildId;
                    break;
                default:
                    break;
            }

            string likeId = "";
            string likeUrl = "";
            string likeCountUrl = "";
            string likeClass = "";
            string likeCountId = "";

            string unlikeId = "";
            string unlikeUrl = "";
            string unlikeCountUrl = "";
            string unlikeClass = "";
            string unlikeCountId = "";

            string shoppingCartId = "";
            string shoppingCartUrl = "";
            string shoppingCartCountId = "";

            string handPointingId = "";
            string handPointingUrl = "";
            string handPointingCountId = "";

            string commentId = "";
            string commentCountId = "";


            if (Model.IsMenu)
            {

                //plumbing for LikeUnlie
                likeId = "like" + count.ToString();
                likeUrl = Url.Action("Like", "LikeUnlikes", new { menuPath1Id = menuPath1Id, menuPath2Id = menuPath2Id, menuPath3Id = menuPath3Id, productId = productId, productChildId = productChildId, userId = userId, isLike = true });
                likeCountId = likeId + "count";
                likeCountUrl = Url.Action("Count", "LikeUnlikes", new { menuPath1Id = menuPath1Id, menuPath2Id = menuPath2Id, menuPath3Id = menuPath3Id, productId = productId, productChildId = productChildId, userId = userId, isLike = true });


                unlikeId = "unlike" + count.ToString();
                unlikeUrl = Url.Action("Like", "LikeUnlikes", new { menuPath1Id = menuPath1Id, menuPath2Id = menuPath2Id, menuPath3Id = menuPath3Id, productId = productId, productChildId = productChildId, userId = userId, isLike = false });
                unlikeCountId = unlikeId + "count";
                unlikeCountUrl = Url.Action("Count", "LikeUnlikes", new { menuPath1Id = menuPath1Id, menuPath2Id = menuPath2Id, menuPath3Id = menuPath3Id, productId = productId, productChildId = productChildId, userId = userId });

                shoppingCartId = "shoppingcart" + count.ToString();
                shoppingCartUrl = "";

                shoppingCartCountId = shoppingCartId + "count";
                //shoppingCartCountUrl = "";

                handPointingId = "handpointingId" + count.ToString();
                handPointingUrl = "";

                handPointingCountId = handPointingId + "count";
                //handPointingCountUrl = "";

                commentId = "comment" + count.ToString();
                commentUrl = Url.Action("AddComment", "GlobalComments", new { menuPath1Id = menuPath1Id, menuPath2Id = menuPath2Id, menuPath3Id = menuPath3Id, productId = productId, productChildId = productChildId, userId = userId });



                commentCountId = commentId + "count";
                //commentCountUrl = Url.Action("Count", "GlobalComments", new { menuPath1Id = menuPath1Id, menuPath2Id = menuPath2Id, menuPath3Id = menuPath3Id, productId = productId, productChildId = productChildId, userId = userId });
                likeClass = classSmileFace;
                unlikeClass = classUnhappyFace;
                if (userId.IsNullOrWhiteSpace())
                {
                    likeClass += " disabled anchorButtons btn btn-xs btn-info   aria-label far fa-smile";
                    unlikeClass = " disabled anchorButtons btn btn-xs btn-danger aria-label far fa-frown-open";
                }
                else
                {
                    likeClass += (IndexListVMArray[i].MenuManager.LikeUnlikesCounter.HasLiked ? " disabled anchorButtons btn btn-xs btn-info   aria-label far fa-smile" : " anchorButtons btn btn-xs btn-info   aria-label far fa-smile");

                    unlikeClass += (IndexListVMArray[i].MenuManager.LikeUnlikesCounter.HasUnLiked ? " disabled anchorButtons btn btn-xs btn-danger aria-label far fa-frown-open" : " anchorButtons btn btn-xs btn-danger aria-label far fa-frown-open");
                }


            }
            shortNameOfProduct = IndexListVMArray[i].ShortName;


            @*<div class="col-lg-3 col-md-4 col-xs-6">
                    <a href="#" class="d-block mb-4 h-100">
                        <img class="img-fluid img-thumbnail" src="http://placehold.it/400x300" alt="">
                    </a>
                </div>*@

            <div class="container col-lg-3 col-md-4 col-xs-6 m-0">
                <div class="border border-dark rounded text-center backgroundYellowOnHover ">

                    <a href="@mainMenuPath" title="@IndexListVMArray[i].FullName" class="d-block h-100 text-center mb-0">
                        <h4>@shortNameOfProduct</h4>
                        <img class="img-fluid img-thumbnail" src="@imagePath" alt="@IndexListVMArray[i].ShortName">
                    </a>
                    @if (Model.IsMenu)
                    {
                        <div class="m-0">

                            @*These are all anchorButtons Class*@
                            <a id="@shoppingCartId" class="anchorButtons btn btn-xs  btn-success aria-label fa fa-shopping-cart" data-url="@shoppingCartUrl" onclick="ShoppingCart();"></a>

                            <a id="@handPointingId" class="anchorButtons btn btn-xs  btn-warning aria-label far fa-hand-point-up" data-url="@handPointingUrl" onclick="Bid();"></a>


                            <a id="@likeId"
                               class="@likeClass"
                               data-nameofproduct="@shortNameOfProduct"
                               data-url="@likeUrl"
                               data-toggle="modal"
                               data-target="#mymodalnew"
                               onclick="EditlikeUnlikeModal(this);"></a>
                            @*onclick="Like(this, document.getElementById(this));"></a>*@

                            <a id="@unlikeId"
                               class="@unlikeClass"
                               data-nameofproduct="@shortNameOfProduct"
                               data-url="@unlikeUrl"
                               data-toggle="modal"
                               data-target="#mymodalnew"
                               onclick="EditlikeUnlikeModal(this);"></a>
                            @*onclick="Like(this);"></a>*@

                            <a id="@commentId"
                               data-toggle="modal"
                               href="#modalBoxId"
                               data-url="@commentUrl"
                               class="anchorButtons btn btn-xs btn-primary aria-label far fa-comment"
                               onclick="LoadDataUrlInComment(this, document.getElementById('modalBoxId'));"></a>


                        </div>


                        <div>
                            @*countClass are those items that show the count*@
                            <a id="@shoppingCartCountId" class="btn btn-xs  aria-label disabled"></a>
                            <a id="@handPointingCountId" class="btn btn-xs  aria-label disabled"></a>


                            <a id="@likeCountId"
                               class="btn btn-xs aria-label"
                               data-nameofproduct="@shortNameOfProduct"
                               data-url="@likeCountUrl"
                               data-toggle="modal"
                               data-target="#mymodalnew"
                               onclick="ShowPplWhoLikeUnlikeThis(this)">@IndexListVMArray[i].MenuManager.LikeUnlikesCounter.LikeCount</a>

                            <a id="@unlikeCountId"
                               class="btn btn-xs aria-label"
                               data-nameofproduct="@shortNameOfProduct"
                               data-url="@unlikeCountUrl"
                               data-toggle="modal"
                               data-target="#mymodalnew"
                               onclick="ShowPplWhoLikeUnlikeThis(this)">@IndexListVMArray[i].MenuManager.LikeUnlikesCounter.UnlikeCount</a>



                            <a id="@commentCountId" class="btn btn-xs aria-label disabled"></a>
                        </div>
                    }
                </div>
            </div>

        }
    </div>
</div>








<!-- Modal for comments -->
<div class="modal fade" id="modalBoxId" tabindex="-1" role="dialog" aria-labelledby="modalLabelId" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="modalLabelId">Comments</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>

            <div class="modal-body">
                <div class="form-group">
                    <div class="control-label col-md-2">
                        Comment
                    </div>
                    <div class="col-md-10">
                        <input type="text" name="comment" value=" " id="comment" class="form-control" />
                    </div>
                </div>
            </div>

            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                <button id="commentSaveBtn" type="button" class="btn btn-primary" data-url="" onclick="AddComment(this, document.getElementById('modalBoxId'), document.getElementById('comment'))">Save changes</button>
            </div>
        </div>
    </div>
</div>


@*Modal to show like/Unlike Users*@


<div class="modal fade" id="mymodalnew" tabindex="-1" role="dialog" aria-labelledby="basicModal" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title" id="myModalHeading"><span id="myModalHeading.span" class=""></span></h4>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>

            <div class="modal-body" id="myModalbodyNewid">
            </div>

            <div class="modal-footer">

                <button type="button" class="btn btn-secondary invisible" id="modalNewCloseBtnId" data-dismiss="modal">Save</button>
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

@*<div class="modal fade" id="modalBoxId" tabindex="-1" role="dialog" aria-labelledby="basicModal" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title" id="myModalLabel">Large Modal</h4>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>

                <div class="modal-body">
                    <h3>Modal Body</h3>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-primary" onclick="AddComment(this, document.getElementById('modalBoxId'), document.getElementById('comment'))" >Save changes</button>
                </div>
            </div>
        </div>
    </div>*@
