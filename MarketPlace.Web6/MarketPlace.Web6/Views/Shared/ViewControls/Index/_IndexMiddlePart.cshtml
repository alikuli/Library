@model ModelsClassLibrary.ViewModels.IndexListVM
<div class="container">

    @{int count = 0;
      string controllerName = this.ViewContext.RouteData.Values["controller"].ToString();
      string returnUrl = Request.Url.PathAndQuery;
      
      
      }

    @foreach (ModelsClassLibrary.ViewModels.IndexItemVM item in Model.DataSortedAndFiltered.ToList())
    {

        string alertRow = (@Model.SelectedIdMatchesThis(item.Id) ? "alert-info " : " ");
        string alertFont = (@Model.SelectedIdMatchesThis(item.Id) ? " text-danger " : " ");
        
        string urlGetAddressForVerification = "#";

        string urlForMakeDefault = Url.Action("MakeDefault", "Addresses", new { addressId = item.Id });

        //The icon is only clickable if notverified, unknown, or verification failed.
        if (item.VerificationStatus == VerificaionStatusENUM.NotVerified 
            || item.VerificationStatus == VerificaionStatusENUM.Unknown 
            || item.VerificationStatus == VerificaionStatusENUM.Failed)
        {
            urlGetAddressForVerification = Url.Action("GetAddressForVerification", controllerName, new { addressId = item.Id });
            
        }
        else
        {
            if(item.VerificationStatus == VerificaionStatusENUM.Mailed)
            {
                
                urlGetAddressForVerification = Url.Action("EnterVerificationNumber", controllerName, new { addressId = item.Id });
            }
            if (item.VerificationStatus == VerificaionStatusENUM.Verified)
            {

                
            }
        }
        
        
        if (count % 2 == 0)
        {
            alertRow += " background-ltgrey ";
        }
        <div class="row @alertRow">

            @*This is the description and image*@
            <div class="col-lg-8">
                @{
                    count++;
                    if (item.PrintLineNumber.IsNullOrWhiteSpace())
                    {
                        item.PrintLineNumber = count.ToString();
                    }
                 }

                @if (Model.Show.VerificationIcon)
                {
                    string src = @Url.Content(item.VerificationIconResult.IconAddress);
                    string toolTip = item.VerificationIconResult.ToolTip;

                    <span data-toggle="tooltip" title="@toolTip" data-placement="top">

                        <a id="id123"
                           href="@urlGetAddressForVerification">
                                <img src="@src" height="16" width="16" />
                        </a>
                    </span>

                }
                




                @if (Model.Show.Edit)
                {
                    if (item.AllowEdit)
                    {
                        <span class="@alertFont" data-toggle="tooltip" title="@item.Comment" data-placement="top">
                            @item.PrintLineNumber. @Html.ActionLink(item.ShortName, "Edit", new { id = item.Id, returnUrl = returnUrl }, new { @id = item.Id, @title = item.FullName, @class = @alertFont })
                        </span>
                    }
                    else
                    {
                        <span class="@alertFont">@item.PrintLineNumber.  @Html.DisplayFor(x => item.ShortName, null, new { @title = item.FullName })</span>
                    }
                }
                else
                {
                    <span class="@alertFont">@item.PrintLineNumber. @Html.DisplayFor(x => item.ShortName, null, new { @title = item.FullName })</span>
                }




</div>



            @*these are the options on the side*@
            <div class="col-lg-4">
                @if (Model.Show.MoveTop)
                {
                    <span class="@alertFont">
                        @Ajax.ActionLink("Top", "MoveTop", new { selectedId = item.Id, sortBy = Model.SortOrderEnum, searchFor = Model.SearchFor },
                                new AjaxOptions
                                {
                                    HttpMethod = "POST",
                                    InsertionMode = InsertionMode.Replace,
                                    UpdateTargetId = "indexmiddlepart",


                                }, new { @class = "@alertFont,  btn-primary" })
                        |
                    </span>

                }

                @if (Model.Show.MoveUp)
                {
                    <span class=@alertFont>
                        @Ajax.ActionLink("Up 1", "MoveUp", new { selectedId = item.Id, sortBy = Model.SortOrderEnum, searchFor = Model.SearchFor },
                                new AjaxOptions
                                {
                                    HttpMethod = "POST",
                                    InsertionMode = InsertionMode.Replace,
                                    UpdateTargetId = "indexmiddlepart",


                                }, new { @class = "@alertFont  btn-info" })
                        |
                    </span>

                }
                @if (Model.Show.MoveDown)
                {
                    <span class=@alertFont>
                        @Ajax.ActionLink("Down 1", "MoveDown", new { selectedId = item.Id, sortBy = Model.SortOrderEnum, searchFor = Model.SearchFor },
                                new AjaxOptions
                                {
                                    HttpMethod = "POST",
                                    InsertionMode = InsertionMode.Replace,
                                    UpdateTargetId = "indexmiddlepart",


                                }, new { @class = @alertFont })
                        |
                    </span>

                }

                @if (Model.Show.MoveBottom)
                {
                    <span class="@alertFont ">
                        @Ajax.ActionLink("Bottom", "MoveBottom", new { selectedId = item.Id, sortBy = Model.SortOrderEnum, searchFor = Model.SearchFor },
                                new AjaxOptions
                                {
                                    HttpMethod = "POST",
                                    InsertionMode = InsertionMode.Replace,
                                    UpdateTargetId = "indexmiddlepart",


                                }, new { @class = "@alertFont btn-warning" })
                        |
                    </span>

                }

                @*<span>
                    @Html.ActionLink("View", "Details", new { id = item.Id }, new { @class = "@alertFont btn-info" }) |
                </span>*@

                @if (item.AllowDelete)
                {
                    <span class="@alertFont" data-toggle="tooltip" title="Delete" data-placement="top">
                        @Html.ActionLink(" ", "Delete", new { id = item.Id }, new { @class = "@alertFont btn-danger far fa-trash-alt" })

                    </span>

                }
                
                @if (Model.Show.MakeDefaultIcon)
                {
                    <span >
                            
                        @if (item.IsDefault)
                        {
                            <img src="@Url.Content( @ConfigManagerLibrary.Icon.StarIcon)" data-toggle="tooltip" title="Default Address" data-placement="top" />
                        }
                        else
                        {

                             @Html.ActionLink("Make Default ", "UpdateAndSaveDefaultAddress", controllerName, new { addressId = item.Id, selectedId = item.Id, sortBy = Model.SortOrderEnum, searchFor = Model.SearchFor }, new { @class = "@alertFont btn-warning" })

                        }
                    </span>
                }

            </div>
        </div>

    }
</div>

<div class="modal fade" id="mymodalnew" tabindex="-1" role="dialog" aria-labelledby="basicModal" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title" id="myModalHeading"><span id="myModalHeading.span" class=""></span></h4>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>

            <div class="modal-body" id="myModalbodyNewid">
                
            </div>

            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                <button type="button" class="btn btn-success d-none" id="modalNewCloseBtnId" data-dismiss="modal">Save</button>
            </div>
        </div>
    </div>
</div>

