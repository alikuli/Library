@*https://www.bootply.com/jf5wQlQVGI*@
@*https://stackoverflow.com/questions/24276367/how-to-make-an-entire-bootstrap-thumbnail-clickable-for-mobile-and-tablet*@

@*https://stackoverflow.com/questions/24590222/bootstrap-3-grid-with-different-height-in-each-item-is-it-solvable-using-only*@
@*<style>
        .akaFix
        {
            display:flex;
            flex-wrap:wrap;
            width:100%;
        }
    </style>*@

@model ModelsClassLibrary.ViewModels.IndexListVM

@{
    int count = 0;
    string returnurl = Request.Url.PathAndQuery;
    Model.MenuManager.MenuState.ControllerCurrentName = this.ViewContext.RouteData.Values["controller"].ToString();
    string currController = Model.MenuManager.MenuState.ControllerCurrentName;
    string editController = Model.MenuManager.MenuState.CreateAndEditLink_ControllerName;
    bool isProductChild = Model.MenuManager.MenuState.IsProductChild;
    ModelsClassLibrary.ViewModels.IndexItemVM[] IndexListVMArray = Model.DataSortedAndFilteredArray;
    string userId = Model.User.Id;
    string commentUrl = "";
}


<div class="container">





</div>

<div class="panel panel-default ">

    @*FOREACH IS HERE*@

    <div class="akaFix panel-body ">


        @*@foreach (ModelsClassLibrary.ViewModels.IndexItemVM indexItemVM in Model.DataSortedAndFiltered)
            {*@


        @for (int i = 0; i < IndexListVMArray.Length; i++)
        {



            string imagePath = "";
            string mainMenuPath = "";
            string alert = (@Model.SelectedIdMatchesThis(IndexListVMArray[i].Id) ? "alert-info " : " ");
            string alertFont = (@Model.SelectedIdMatchesThis(IndexListVMArray[i].Id) ? " text-danger " : " ");
            string modalBoxId = "myModal" + count;
            string modalBoxIdInButton = "#" + modalBoxId;
            string modalLabelId = "modalLabelId" + count;
            string menuPath1Id = "";
            string menuPath2Id = "";
            string menuPath3Id = "";
            string productId = "";
            string productChildId = "";
            string idForEdit = "";
            string menuPathMainId = "";


            if (count % 2 == 0)
            {
                alert += " background-ltgrey ";
            }

            count++;


            if (IndexListVMArray[i].IsImageThere)
            {
                imagePath = Url.Content(IndexListVMArray[i].ImageAddressStr);
            }




            //this has to be updated for the menu
            if (Model.MenuManager.MenuState.IsMenu)
            {

                switch (Model.MenuManager.MenuState.MenuEnum)
                {
                    case MenuENUM.IndexMenuProductChild:
                        mainMenuPath = Url.Action("ProductOwner", currController, new { id = IndexListVMArray[i].Id, menuEnum = Model.MenuManager.MenuState.NextMenu, });
                        break;
                    default:
                        mainMenuPath = Url.Action("index", currController, new { id = IndexListVMArray[i].Id, menuEnum = Model.MenuManager.MenuState.NextMenu, });
                        break;
                }

            }
            else
            {
                mainMenuPath = Url.Action("Edit", editController, new { id = IndexListVMArray[i].Id });
            }


            if (Model.UserIsAdmin)
            {
                menuPathMainId = "";
                idForEdit = IndexListVMArray[i].Id;

                switch (IndexListVMArray[i].MenuManager.MenuState.MenuEnum)
                {
                    case MenuENUM.IndexDefault:
                        break;
                    case MenuENUM.IndexMenuPath1:
                        //item is menuPathMain
                        menuPathMainId = IndexListVMArray[i].Id;
                        idForEdit = IndexListVMArray[i].MenuManager.MenuState.MenuPath1Id;
                        menuPath1Id = IndexListVMArray[i].MenuManager.MenuState.MenuPath1Id;
                        break;
                    case MenuENUM.IndexMenuPath2:
                        //item is menuPathMain
                        menuPathMainId = IndexListVMArray[i].Id;
                        idForEdit = IndexListVMArray[i].MenuManager.MenuState.MenuPath2Id;
                        menuPath1Id = IndexListVMArray[i].MenuManager.MenuState.MenuPath1Id;
                        menuPath2Id = IndexListVMArray[i].MenuManager.MenuState.MenuPath2Id;

                        break;
                    case MenuENUM.IndexMenuPath3:
                        //item is menuPathMain
                        menuPathMainId = IndexListVMArray[i].Id;
                        idForEdit = IndexListVMArray[i].MenuManager.MenuState.MenuPath3Id;
                        menuPath1Id = IndexListVMArray[i].MenuManager.MenuState.MenuPath1Id;
                        menuPath2Id = IndexListVMArray[i].MenuManager.MenuState.MenuPath2Id;
                        menuPath3Id = IndexListVMArray[i].MenuManager.MenuState.MenuPath3Id;
                        break;
                    case MenuENUM.IndexMenuProduct:
                        //item is product
                        //productId = IndexListVMArray[i].Id;
                        idForEdit = IndexListVMArray[i].MenuManager.MenuState.ProductId;
                        menuPath1Id = IndexListVMArray[i].MenuManager.MenuState.MenuPath1Id;
                        menuPath2Id = IndexListVMArray[i].MenuManager.MenuState.MenuPath2Id;
                        menuPath3Id = IndexListVMArray[i].MenuManager.MenuState.MenuPath3Id;
                        break;
                    case MenuENUM.IndexMenuProductChild:
                        //item is productChild
                        //productChildId = IndexListVMArray[i].Id;
                        idForEdit = IndexListVMArray[i].MenuManager.MenuState.ProductChildId;
                        idForEdit = IndexListVMArray[i].MenuManager.MenuState.ProductId;
                        menuPath1Id = IndexListVMArray[i].MenuManager.MenuState.MenuPath1Id;
                        menuPath2Id = IndexListVMArray[i].MenuManager.MenuState.MenuPath2Id;
                        menuPath3Id = IndexListVMArray[i].MenuManager.MenuState.MenuPath3Id;
                        productChildId = IndexListVMArray[i].MenuManager.MenuState.ProductChildId;
                        break;
                    default:
                        break;
                }

            }


            //plumbing for LikeUnlie
            string likeUrl = Url.Action("Like", "LikeUnlikes", new { menuPath1Id = menuPath1Id, menuPath2Id = menuPath2Id, menuPath3Id = menuPath3Id, productId = productId, productChildId = productChildId, userId = userId, isLike = true });

            string unlikeUrl = Url.Action("Like", "LikeUnlikes", new { menuPath1Id = menuPath1Id, menuPath2Id = menuPath2Id, menuPath3Id = menuPath3Id, productId = productId, productChildId = productChildId, userId = userId, isLike = false });

            string likeId = "like" + count.ToString();
            string likeCountId = likeId + "count";

            string unlikeId = "unlike" + count.ToString();
            string unlikeCountId = unlikeId + "count";

            //plumbing for Comment
            string commentId = "comment" + count.ToString();
            commentUrl = Url.Action("AddComment", "GlobalComments", new { menuPath1Id = menuPath1Id, menuPath2Id = menuPath2Id, menuPath3Id = menuPath3Id, productId = productId, productChildId = productChildId, userId = userId });


            <div class="gallery col-lg-2 col-lg-offset-1 col-md-2 col-md-offset-1 col-sm-3 col-sm-offset-1 col-xs-6  thumbnail" style="margin-bottom:10px">
                <a href="@mainMenuPath" title="@IndexListVMArray[i].FullName">
                    <div id="MyDiv" class="caption ">
                        <h4>@IndexListVMArray[i].ShortName</h4>
                        <p class="">
                            @IndexListVMArray[i].Description
                        </p>
                    </div>
                    <p class="">
                        <img src="@imagePath" alt="@IndexListVMArray[i].ShortName" class=" img-responsive  img-rounded ">
                    </p>
                </a>



                <div class="container   text-center">
                    @*was container class*@
                    <div class="row background-ltgrey">
                        <div class="text-center">
                            
                            @IndexListVMArray[i].FullName
                        </div>
                    </div>


                    @*This is the Icons row*@
                    <div class="row"  >
                        <span class="">
                            @Html.ActionLink(" ", " ", " ", new { userId = userId }, new { @class = "btn btn-xs btn-warning far fa-hand-point-up", title = "Bid"})
                        </span>

                        <span>
                            @Html.ActionLink(" ", " ", " ", new { userId = userId }, new { @class = "btn btn-xs btn-success aria-label fa fa-shopping-cart" })

                        </span>

                        <span>
                            <a id="@likeId" class="btn   btn-xs  btn-info aria-label far fa-smile" onclick="Like(this, '@likeUrl')"></a>

                        </span>

                        <span>
                            <a id="@unlikeId" class="btn btn-xs btn-danger aria-label far fa-frown-open" onclick="Like(this, '@unlikeUrl' )"></a>

                        </span>

                        <span>
                            <a data-toggle="modal" href="#modalBoxId" id="@commentId" data-url="@commentUrl" class="btn btn-xs btn-primary aria-label far fa-comment" onclick="LoadDataUrlInComment(this, document.getElementById('commentSaveBtn')); "></a>
                        </span>

                    </div>


                    <div class="row ">
                        <span class="">
                            @Html.ActionLink(" ", " ", " ", new { userId = userId }, new { @class = "btn btn-xs btn-warning far fa-hand-point-up", title = "Bid" })
                        </span>

                        <span>
                            @Html.ActionLink(" ", " ", " ", new { userId = userId }, new { @class = "btn btn-xs btn-success aria-label fa fa-shopping-cart" })

                        </span>

                        <span>
                            <a id="@likeCountId" class=" btn   btn-xs  btn-default disabled noBorderButton" onclick="Like(this, '@likeUrl')">+99</a>

                        </span>

                        <span>
                            <a id="@unlikeId" class="btn btn-xs btn-danger aria-label far fa-frown-open noBorderButton" onclick="Like(this, '@unlikeUrl' )">98</a>

                        </span>

                        <span>
                            <a data-toggle="modal" href="#modalBoxId" id="@commentId" data-url="@commentUrl" class="btn btn-xs btn-primary aria-label far fa-comment" onclick="LoadDataUrlInComment(this, document.getElementById('commentSaveBtn')); "></a>
                        </span>

                    </div>






                    <div class="row">
                        <div class="col-md-12">

                            <span class="fa fa-star-o" aria-hidden="false"></span>
                            <span class="fa fa-star-o" aria-hidden="false"></span>
                            <span class="fa fa-star-o" aria-hidden="false"></span>
                            <span class="fa fa-star-o" aria-hidden="false"></span>
                            <span class="fa fa-star-o" aria-hidden="false"></span>

                        </div>
                    </div>


                    <div class="row">

                        @if (Model.User.IsNull())
                        {

                        }
                        else
                        {
                            //string editId = IndexListVMArray[i].Id;
                            //productId = "";
                            productChildId = "";

                            <div class="row fontHeavy">

                                @if (Model.UserIsAdmin)
                                {

                                    //This is the Edit below the picture.
                                    string url = Url.Action("Edit", editController, new { id = idForEdit, returnurl = returnurl, menuEnum = Model.MenuManager.MenuState.MenuEnum, menuPathMainId = menuPathMainId, productId = productId, productChildId = productChildId }, null); ;

                                    <div class="text-center">
                                        <a href="@url">Edit</a>
                                    </div>

                                }
                            </div>
                        }
                    </div>


                </div>

            </div>
        }

        <div class="modal fade" id="modalBoxId" tabindex="-1" role="dialog" aria-labelledby="modalLabelId" aria-hidden="true">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="modalLabelId">Comments</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <div class="form-group">
                            <div class="control-label col-md-2">
                                Comment
                            </div>
                            <div class="col-md-10">
                                <input type="text" name="comment" value=" " id="comment" class="form-control" />
                            </div>
                        </div>

                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                        <button id="commentSaveBtn" type="button" class="btn btn-primary" data-url="" onclick="AddComment(this, document.getElementById('modalBoxId'), document.getElementById('comment'))">Save changes</button>
                    </div>
                </div>
            </div>
        </div>    <!-- Modal -->
    </div>

</div>

