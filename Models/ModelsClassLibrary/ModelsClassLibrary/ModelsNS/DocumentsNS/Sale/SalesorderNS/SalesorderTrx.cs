using AliKuli.UtilitiesNS;
using AliKuli.Extentions;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;
using System.Web;

namespace ModelsClassLibrary.ModelsNS.DocumentsNS.SaleNS
{
    /// <summary>
    /// Item will be considered shipped when remaining is zero.
    /// </summary>
    public class SalesOrderTrx : AbstractDocumentTrx
    {

        
        #region SalesOrder

        /// <summary>
        /// This is the salesorder to whom the transaction belongs.
        /// </summary>
        public Guid SalesOrderID { get; set; }
        public SalesOrder SalesOrder { get; set; }

        #endregion


        #region Delegates for counter class

        
        /// <summary>
        /// This is the total amount shipped against the SalesOrder. This amount comes from
        /// the invoices generated by this sales order.
        /// </summary>
        /// <returns></returns>
        protected override decimal Calculator_TotalShippedQty()
        {
            
            if (((ICollection<object>) InvoiceTrxs).IsNullOrEmpty())
                return 0;

            decimal totalQtyShipped = 0;
            foreach (var item in InvoiceTrxs.ToList())
            {
                totalQtyShipped += item.ShipQty;
            }

            return totalQtyShipped;
        }

        /// <summary>
        /// This returns the total ordered qty - total shipped qty.
        /// </summary>
        /// <returns></returns>
        protected override decimal Calculator_QtyRemaining()
        {

            return OrderedQty - TotalShippedQty.Amount;
        }

        #endregion

        #region SelfErrorCheck and Helpers

        public override void SelfErrorCheck()
        {
            base.SelfErrorCheck();

            Check_SalesOrderId();
            Check_SalesOrder();
            Check_If_Amount_Is_Negative_Force_Credit_Order_Shipped();
            Check_IsDateToShip_IsBeforeOrEqualTo_DateExpectedEnd();

        }

        protected override void Check_If_Amount_Is_Negative_Force_Credit_Order_Shipped()
        {
            if (!IsForcedSale)
            {
                if (OrderedQty < ShipQty)
                {
                    throw new Exception(string.Format("Quantity ordered is '{0}' Quantity To Ship: '{1}'. You are shipping more than the ordered amount!.  {2}. AbstractDocumentTrx.Check_Qty_Shipped_Not_Greater_Than_Qty_Ordered.",
                        OrderedQty,
                        ShipQty,
                        NOT_ALLOWED_STATEMENT_FOR_FORCED_SALE));
                }
            }
        }


        /// <summary>
        /// Ensurse the before date is equal to or before the Expected date.
        /// </summary>
        private void Check_IsDateToShip_IsBeforeOrEqualTo_DateExpectedEnd()
        {
            if (!IsDateToShiped_BeforeOrEqualTo_DateExpectedEnd)
                throw new Exception("Date to Ship is after Date Expected. Check_IsDateToShip_IsBeforeOrEqualTo_DateExpectedEnd.SalesorderTrx ");

        }

        /// <summary>
        /// Checks to see if sales order passed
        /// </summary>
        private void Check_SalesOrder()
        {
            if (SalesOrder.IsNull())
            {
                throw new Exception("No sales order passed. Error. 2.SalesorderTrx ");
            }
        }

        /// <summary>
        /// Ensures taht SalesOrderId is not Null or empty.
        /// </summary>
        private void Check_SalesOrderId()
        {
            if (SalesOrderID.IsNullOrEmpty())
            {
                throw new Exception("No sales order passed. Error. 1.SalesorderTrx ");
            }
        }
        
        #endregion

        #region Overrides
        public override string ToString()
        {
            string message = string.Format("SO: {4} - Product: {0} Ordered: {1}, Shipping {5}, Price: {2} with Discount {3:p2}",
                Product.Name,
                OrderedQty,
                ListedPrice,
                DiscountPct,
                SalesOrder.IdString(),
                ShipQty);

            return message;
        }

        public override string MakeUniqueName()
        {
            return string.Format("{0}{1}", SalesOrderID, ProductID);
        }
        
        #endregion

        #region Navigation Properties
        /// <summary>
        /// These are the list of Invoice Trxs which have been created using this salesOrder.
        /// </summary>
        public virtual ICollection<InvoiceTrx> InvoiceTrxs { get; set; }
        
        #endregion

        #region Loaders
        public void LoadFrom(SalesOrderTrx soTrx)
        {
            LoadFrom(soTrx as AbstractDocumentTrx);

            SalesOrder = soTrx.SalesOrder;
            SalesOrderID = soTrx.SalesOrderID;
            //Navigation
            InvoiceTrxs = soTrx.InvoiceTrxs;
        }
        
        #endregion        
    }
}